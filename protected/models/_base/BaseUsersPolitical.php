<?php

/**
 * This is the model base class for the table "tbl_users_political".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UsersPolitical".
 *
 * Columns in table "tbl_users_political" available as properties of the model,
 * followed by relations of table "tbl_users_political" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idUser
 * @property string $name
 * @property string $file
 * @property string $dateCreated
 *
 * @property Users $idUser0
 */
abstract class BaseUsersPolitical extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_users_political';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'UsersPolitical|UsersPoliticals', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('idUser, name, file', 'required'),
			array('idUser', 'numerical', 'integerOnly'=>true),
                        array('file', 'match', 'pattern'=>'/\.(pdf)$/i','message'=>Yii::t('err','El {attribute} es invÃ¡lido, Solo los archivos con estas extensiones son permitidos: pdf'), 'allowEmpty'=>true),			
			array('name', 'length', 'max'=>100),
			array('file', 'length', 'max'=>500),
			array('idUser', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idUser, name, file, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idUser0' => array(self::BELONGS_TO, 'Users', 'idUser'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idUser' => null,
			'name' => Yii::t('app', 'Name'),
			'file' => Yii::t('app', 'File'),
			'dateCreated' => Yii::t('app', 'Date Created'),
			'idUser0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idUser', $this->idUser);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('file', $this->file, true);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}