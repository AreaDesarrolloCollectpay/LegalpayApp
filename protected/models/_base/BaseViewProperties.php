<?php

/**
 * This is the model base class for the table "view_properties".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ViewProperties".
 *
 * Columns in table "view_properties" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $idDebtor
 * @property integer $idPropertyType
 * @property string $customer
 * @property integer $idUserProperty
 * @property string $coordinator
 * @property string $code
 * @property string $name
 * @property double $capital
 * @property double $balance
 * @property string $property
 * @property string $address
 * @property string $number
 * @property string $comments
 * @property string $idCity
 * @property string $city
 * @property string $idDepartment
 * @property string $department
 * @property string $idState
 * @property string $state
 *
 */
abstract class BaseViewProperties extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'view_properties';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ViewProperties|ViewProperties', $n);
	}

	public static function representingColumn() {
		return 'coordinator';
	}

	public function rules() {
		return array(
			array('coordinator, property, address, number, comments, city, department', 'required'),
			array('id, idDebtor, idPropertyType, idUserProperty', 'numerical', 'integerOnly'=>true),
			array('capital, balance', 'numerical'),
			array('property, address, number', 'length', 'max'=>500),
			array('idCity', 'length', 'max'=>11),
			array('idDepartment, idState', 'length', 'max'=>255),
			array('customer, code, name, state', 'safe'),
			array('id, idDebtor, idPropertyType, customer, idUserProperty, code, name, capital, balance, idCity, idDepartment, idState, state', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idDebtor, idPropertyType, customer, idUserProperty, coordinator, code, name, capital, balance, property, address, number, comments, idCity, city, idDepartment, department, idState, state', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idDebtor' => Yii::t('app', 'Id Debtor'),
			'idPropertyType' => Yii::t('app', 'Id Property Type'),
			'customer' => Yii::t('app', 'Customer'),
			'idUserProperty' => Yii::t('app', 'Id User Property'),
			'coordinator' => Yii::t('app', 'Coordinator'),
			'code' => Yii::t('app', 'Code'),
			'name' => Yii::t('app', 'Name'),
			'capital' => Yii::t('app', 'Capital'),
			'balance' => Yii::t('app', 'Balance'),
			'property' => Yii::t('app', 'Property'),
			'address' => Yii::t('app', 'Address'),
			'number' => Yii::t('app', 'Number'),
			'comments' => Yii::t('app', 'Comments'),
			'idCity' => Yii::t('app', 'Id City'),
			'city' => Yii::t('app', 'City'),
			'idDepartment' => Yii::t('app', 'Id Department'),
			'department' => Yii::t('app', 'Department'),
			'idState' => Yii::t('app', 'Id State'),
			'state' => Yii::t('app', 'State'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idDebtor', $this->idDebtor);
		$criteria->compare('idPropertyType', $this->idPropertyType);
		$criteria->compare('customer', $this->customer, true);
		$criteria->compare('idUserProperty', $this->idUserProperty);
		$criteria->compare('coordinator', $this->coordinator, true);
		$criteria->compare('code', $this->code, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('capital', $this->capital);
		$criteria->compare('balance', $this->balance);
		$criteria->compare('property', $this->property, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('number', $this->number, true);
		$criteria->compare('comments', $this->comments, true);
		$criteria->compare('idCity', $this->idCity, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('idDepartment', $this->idDepartment, true);
		$criteria->compare('department', $this->department, true);
		$criteria->compare('idState', $this->idState, true);
		$criteria->compare('state', $this->state, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}