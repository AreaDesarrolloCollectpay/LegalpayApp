<?php

/**
 * This is the model base class for the table "tbl_users_notifications".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UsersNotifications".
 *
 * Columns in table "tbl_users_notifications" available as properties of the model,
 * followed by relations of table "tbl_users_notifications" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idUser
 * @property integer $idCreator
 * @property integer $idMessage
 * @property string $parameters
 * @property integer $seen
 * @property integer $hidden
 * @property string $dateCreated
 *
 * @property TblNotificationsMessages $idMessage0
 * @property TblUsers $idUser0
 */
abstract class BaseUsersNotifications extends GxActiveRecord {
    
        public $params;
        public $message;
        public $url;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_users_notifications';
	}
        
        public function getParams(){
            $this->params = array();
            if($this->parameters != NULL && $this->parameters != '' && Controller::isJSON($this->parameters)){                
                $this->params = CJSON::decode($this->parameters,TRUE);
            }
            return $this->params;
        }
        
        public function getMessage(){
            return $this->message;
        }
        
        public function getUrl(){
            return $this->url;
        }

	public static function label($n = 1) {
		return Yii::t('app', 'UsersNotifications|UsersNotifications', $n);
	}

	public static function representingColumn() {
		return 'parameters';
	}

	public function rules() {
		return array(
			array('idUser, idMessage', 'required'),
			array('idUser, idCreator, idMessage, seen, hidden', 'numerical', 'integerOnly'=>true),
			array('idCreator, seen, hidden', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idUser, idCreator, idMessage, parameters, seen, hidden, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
                        'messages' => array(self::BELONGS_TO, 'NotificationsMessages', 'idMessage'),
                        'users' => array(self::BELONGS_TO, 'Users', 'idUser'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}
        
        public function getTime(){
            $mins = Controller::getMinsFecha($this->dateCreated);
            return Controller::calculafecha($mins);
        }

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idUser' => null,
			'idCreator' => Yii::t('app', 'Id Creator'),
			'idMessage' => null,
			'parameters' => Yii::t('app', 'Parameters'),
			'seen' => Yii::t('app', 'Seen'),
                        'hidden' => Yii::t('app', 'Hidden'),
			'dateCreated' => Yii::t('app', 'Date Created'),
			'idUser0' => null,
			'idTypeNotification0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idUser', $this->idUser);
		$criteria->compare('idCreator', $this->idCreator);
		$criteria->compare('idMessage', $this->idMessage); 
		$criteria->compare('parameters', $this->parameters, true);
		$criteria->compare('seen', $this->seen);
                $criteria->compare('hidden', $this->hidden);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}