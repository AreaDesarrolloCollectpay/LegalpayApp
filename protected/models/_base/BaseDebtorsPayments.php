<?php

/**
 * This is the model base class for the table "tbl_debtors_payments".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "DebtorsPayments".
 *
 * Columns in table "tbl_debtors_payments" available as properties of the model,
 * followed by relations of table "tbl_debtors_payments" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idDebtorState
 * @property integer $idUserPayments
 * @property integer $idDebtorDebt
 * @property integer $idDebtorObligation
 * @property integer $idPaymentsType
 * @property integer $idPaymentsMethod
 * @property integer $idPaymentsState
 * @property integer $idPaymentsDiscrimination
 * @property integer $idPaymentsWhoPaid
 * @property integer $is_promise
 * @property double $value
 * @property string $datePay
 * @property string $supportPayments
 * @property string $comments
 * @property string $order_id
 * @property string $responseCode
 * @property string $transaction_id
 * @property string $authorizationCode
 * @property string $trazabilityCode
 * @property string $url_file
 * @property string $url_html
 * @property string $dateCreated
 *
 * @property DebtorsDebts $idDebtorDebt0
 * @property DebtorsObligations $idDebtorObligation0
 * @property DebtorsState $idDebtorState0
 * @property PaymentsDiscrimination $idPaymentsDiscrimination0
 * @property PaymentsMethods $idPaymentsMethod0
 * @property PaymentsState $idPaymentsState0
 * @property PaymentsType $idPaymentsType0
 * @property PaymentsWhopaid $idPaymentsWhoPa
 * @property Users $idUserPayments0
 * @property DebtorsPaymentsPayer[] $debtorsPaymentsPayers
 */
abstract class BaseDebtorsPayments extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_debtors_payments';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'DebtorsPayments|DebtorsPayments', $n);
	}

	public static function representingColumn() {
		return 'datePay';
	}

	public function rules() {
		return array(
			array('idDebtorDebt, idPaymentsType, idPaymentsState, value', 'required'),
                        array('idPaymentsMethod, idPaymentsWhoPaid', 'required','on' => 'validacion,validado'),
                        array('supportPayments, idPaymentsDiscrimination', 'required','on' => 'validado'),
			array('idDebtorState, idUserPayments, idDebtorDebt, idDebtorObligation, idPaymentsType, idPaymentsMethod, idPaymentsState, idPaymentsDiscrimination, idPaymentsWhoPaid, is_promise', 'numerical', 'integerOnly'=>true),
                        array('supportPayments', 'match', 'pattern'=>'/\.(gif|jpg|jpeg|png|pdf|tiff)$/i','message'=>Yii::t('err','El {attribute} es inválido, Solo los archivos con estas extensiones son permitidos: gif, jpg, jpeg, png, tiff, pdf'), 'allowEmpty'=>true),			
			array('value', 'numerical', 'integerOnly'=>true, 'min'=>1),
			array('datePay, supportPayments, comments, order_id, responseCode, transaction_id, authorizationCode, trazabilityCode, url_file, url_html', 'safe'),
			array('idDebtorState, idUserPayments, idDebtorDebt, idDebtorObligation, idPaymentsType, idPaymentsMethod, idPaymentsState, idPaymentsDiscrimination, idPaymentsWhoPaid, is_promise, supportPayments, comments, order_id, responseCode, transaction_id, authorizationCode, trazabilityCode, url_file, url_html', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idDebtorState, idUserPayments, idDebtorDebt, idDebtorObligation, idPaymentsType, idPaymentsMethod, idPaymentsState, idPaymentsDiscrimination, idPaymentsWhoPaid, is_promise, value, datePay, supportPayments, comments, order_id, responseCode, transaction_id, authorizationCode, trazabilityCode, url_file, url_html, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
                        'idDebtorDebt0' => array(self::BELONGS_TO, 'DebtorsDebts', 'idDebtorDebt'),
			'idDebtorObligation0' => array(self::BELONGS_TO, 'DebtorsObligations', 'idDebtorObligation'),
                        'idDebtorState0' => array(self::BELONGS_TO, 'DebtorsState', 'idDebtorState'),
			'idPaymentsDiscrimination0' => array(self::BELONGS_TO, 'PaymentsDiscrimination', 'idPaymentsDiscrimination'),
			'idPaymentsMethod0' => array(self::BELONGS_TO, 'PaymentsMethods', 'idPaymentsMethod'),
			'idPaymentsState0' => array(self::BELONGS_TO, 'PaymentsState', 'idPaymentsState'),
			'idPaymentsType0' => array(self::BELONGS_TO, 'PaymentsType', 'idPaymentsType'),
			'idPaymentsWhoPa' => array(self::BELONGS_TO, 'PaymentsWhopaid', 'idPaymentsWhoPaid'),
			'idUserPayments0' => array(self::BELONGS_TO, 'Users', 'idUserPayments'),
                        'debtorsPaymentsPayers' => array(self::HAS_MANY, 'DebtorsPaymentsPayer', 'idDebtorPayment'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
                        'idDebtorState' => null,
                        'idDebtorDebt' => null,
			'idUserPayments' => Yii::t('front', 'Usuario'),
			'idDebtorObligation' => Yii::t('front', 'Deudor'),
			'idPaymentsType' => Yii::t('front', 'Clase'),
			'idPaymentsMethod' => Yii::t('front', 'Metodo'),
			'idPaymentsState' => Yii::t('front', 'Estado'),
			'idPaymentsDiscrimination' => Yii::t('front', 'Discriminación'),
			'idPaymentsWhoPaid' => Yii::t('front', 'A quien pago'),
                        'is_promise' => Yii::t('app', 'Promesa'),
			'value' => Yii::t('app', 'Valor'),
			'datePay' => Yii::t('app', 'Fecha de Pago'),
			'supportPayments' => Yii::t('app', 'Soporte'),
                        'comments' => Yii::t('app', 'Comentarios'),
                        'order_id' => Yii::t('app', 'Numero de Orden'),
			'responseCode' => Yii::t('app', 'Codigo de Respuesta'),
			'transaction_id' => Yii::t('app', 'ID Transaction'),
			'authorizationCode' => Yii::t('app', 'Codígo de Autorización'),
			'trazabilityCode' => Yii::t('app', 'Codígo de Trazabilidad'),
			'url_file' => Yii::t('app', 'Url PDF'),
                        'url_html' => Yii::t('app', 'Url Html'),
			'dateCreated' => Yii::t('app', 'Fecha de Creación'),
                        'idDebtorDebt0' => null,
			'idDebtorObligation0' => null,
                        'idDebtorState0' => null,
			'idPaymentsDiscrimination0' => null,
			'idPaymentsMethod0' => null,
			'idPaymentsState0' => null,
			'idPaymentsType0' => null,
			'idPaymentsWhoPa' => null,
			'idUserPayments0' => null,
                        'debtorsPaymentsPayers' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
                $criteria->compare('idDebtorState', $this->idDebtorState);
		$criteria->compare('idUserPayments', $this->idUserPayments);
                $criteria->compare('idDebtorDebt', $this->idDebtorDebt);
		$criteria->compare('idDebtorObligation', $this->idDebtorObligation);
		$criteria->compare('idPaymentsType', $this->idPaymentsType);
		$criteria->compare('idPaymentsMethod', $this->idPaymentsMethod);
		$criteria->compare('idPaymentsState', $this->idPaymentsState);
		$criteria->compare('idPaymentsDiscrimination', $this->idPaymentsDiscrimination);
		$criteria->compare('idPaymentsWhoPaid', $this->idPaymentsWhoPaid);
                $criteria->compare('is_promise', $this->is_promise);
		$criteria->compare('value', $this->value);
		$criteria->compare('datePay', $this->datePay, true);
		$criteria->compare('supportPayments', $this->supportPayments, true);
                $criteria->compare('comments', $this->comments, true);
                $criteria->compare('order_id', $this->order_id, true);
		$criteria->compare('responseCode', $this->responseCode, true);
		$criteria->compare('transaction_id', $this->transaction_id, true);
		$criteria->compare('authorizationCode', $this->authorizationCode, true);
		$criteria->compare('trazabilityCode', $this->trazabilityCode, true);
		$criteria->compare('url_file', $this->url_file, true);
                $criteria->compare('url_html', $this->url_html, true);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}