<?php

/**
 * This is the model base class for the table "view_tasks".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ViewTasks".
 *
 * Columns in table "view_tasks" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $idPrimary
 * @property string $numberDocument
 * @property string $name
 * @property string $date
 * @property integer $idTasksAction
 * @property string $actionName
 * @property integer $state
 * @property integer $idUserAsigned
 * @property string $type
 * @property integer $is_internal
 * @property string $url
 *
 */
abstract class BaseViewTasks extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'view_tasks';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ViewTasks|ViewTasks', $n);
	}

	public static function representingColumn() {
		return 'numberDocument';
	}

	public function rules() {
		return array(
			array('id, type', 'required'),
			array('id, idPrimary, idTasksAction, state, idUserAsigned, is_internal', 'numerical', 'integerOnly'=>true),
			array('actionName', 'length', 'max'=>500),
			array('type', 'length', 'max'=>20),
			array('numberDocument, name, date, url', 'safe'),
			array('idPrimary, numberDocument, name, date, idTasksAction, actionName, state, idUserAsigned, is_internal, url', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idPrimary, numberDocument, name, date, idTasksAction, actionName, state, idUserAsigned, type, is_internal, url', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idPrimary' => Yii::t('app', 'Id Primary'),
			'numberDocument' => Yii::t('app', 'Number Document'),
			'name' => Yii::t('app', 'Name'),
			'date' => Yii::t('app', 'Date'),
			'idTasksAction' => Yii::t('app', 'Id Tasks Action'),
			'actionName' => Yii::t('app', 'Action Name'),
			'state' => Yii::t('app', 'State'),
			'idUserAsigned' => Yii::t('app', 'Id User Asigned'),
			'type' => Yii::t('app', 'Type'),
			'is_internal' => Yii::t('app', 'Is Internal'),
			'url' => Yii::t('app', 'Url'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idPrimary', $this->idPrimary);
		$criteria->compare('numberDocument', $this->numberDocument, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('date', $this->date, true);
		$criteria->compare('idTasksAction', $this->idTasksAction);
		$criteria->compare('actionName', $this->actionName, true);
		$criteria->compare('state', $this->state);
		$criteria->compare('idUserAsigned', $this->idUserAsigned);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('is_internal', $this->is_internal);
		$criteria->compare('url', $this->url, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}