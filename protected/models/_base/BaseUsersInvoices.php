<?php

/**
 * This is the model base class for the table "tbl_users_invoices".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UsersInvoices".
 *
 * Columns in table "tbl_users_invoices" available as properties of the model,
 * followed by relations of table "tbl_users_invoices" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idUser
 * @property integer $idUserCreator
 * @property integer $idInvocieState
 * @property string $number
 * @property double $subtotal
 * @property double $tax
 * @property string $date_expedition
 * @property string $date_expiration
 * @property string $file
 * @property string $comments
 * @property string $date_pay
 * @property string $support_pay
 * @property string $comments_pay
 * @property string $date_created
 *
 * @property InvoicesState $idInvocieState0
 * @property Users $idUser0
 * @property Users $idUserCreator0
 */
abstract class BaseUsersInvoices extends GxActiveRecord {
    
    public $value;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_users_invoices';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'UsersInvoices|UsersInvoices', $n);
	}

	public static function representingColumn() {
		return 'number';
	}

	public function rules() {
		return array(
			array('idUser, idInvocieState, number, date_expiration, file', 'required'),
			array('idUser, idUserCreator, idInvocieState', 'numerical', 'integerOnly'=>true),
			array('subtotal, tax', 'numerical'),
			array('number', 'length', 'max'=>50),
                        array('date_expedition, date_expiration, date_pay', 'type', 'type' => 'date', 'message' => '{attribute}: is not a date!', 'dateFormat' => 'yyyy-MM-dd'),
                        array('file, support_pay', 'match', 'pattern'=>'/\.(gif|jpg|jpeg|png|pdf|tiff)$/i','message'=>Yii::t('err','El {attribute} es inválido, Solo los archivos con estas extensiones son permitidos: gif, jpg, jpeg, png, tiff, pdf'), 'allowEmpty'=>true, 'on' => 'support'),		
			array('comments, date_pay, support_pay, comments_pay', 'safe'),
			array('idUserCreator, subtotal, tax, comments, date_pay, support_pay, comments_pay', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idUser, idUserCreator, idInvocieState, number, subtotal, tax, date_expedition, date_expiration, file, comments, date_pay, support_pay, comments_pay, date_created', 'safe', 'on'=>'search'),
		);
	}
        
        public function afterFind(){
            parent::afterFind();                        
            $this->value = $this->subtotal + (($this->subtotal * $this->tax) / 100);
        }

	public function relations() {
		return array(
			'idInvocieState0' => array(self::BELONGS_TO, 'InvoicesState', 'idInvocieState'),
			'idUser0' => array(self::BELONGS_TO, 'Users', 'idUser'),
			'idUserCreator0' => array(self::BELONGS_TO, 'Users', 'idUserCreator'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idUser' => null,
			'idUserCreator' => null,
			'idInvocieState' => Yii::t('app', 'Estado'),
			'number' => Yii::t('app', 'Número Factura'),
			'subtotal' => Yii::t('app', 'Subtotal'),
			'tax' => Yii::t('app', 'IVA'),
			'date_expedition' => Yii::t('app', 'Fecha de Expedición'),
			'date_expiration' => Yii::t('app', 'Fecha de Expiración'),
			'file' => Yii::t('app', 'Factura'),
			'comments' => Yii::t('app', 'Comentarios'),
			'date_pay' => Yii::t('app', 'Fecha de Pago'),
			'support_pay' => Yii::t('app', 'Soporte de Pago'),
			'comments_pay' => Yii::t('app', 'Commentarios Pago'),
			'date_created' => Yii::t('app', 'Fecha Creación'),
			'idInvocieState0' => null,
			'idUser0' => null,
			'idUserCreator0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idUser', $this->idUser);
		$criteria->compare('idUserCreator', $this->idUserCreator);
		$criteria->compare('idInvocieState', $this->idInvocieState);
		$criteria->compare('number', $this->number, true);
		$criteria->compare('subtotal', $this->subtotal);
		$criteria->compare('tax', $this->tax);
		$criteria->compare('date_expedition', $this->date_expedition, true);
		$criteria->compare('date_expiration', $this->date_expiration, true);
		$criteria->compare('file', $this->file, true);
		$criteria->compare('comments', $this->comments, true);
		$criteria->compare('date_pay', $this->date_pay, true);
		$criteria->compare('support_pay', $this->support_pay, true);
		$criteria->compare('comments_pay', $this->comments_pay, true);
		$criteria->compare('date_created', $this->date_created, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}