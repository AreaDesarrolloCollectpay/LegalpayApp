<?php

/**
 * This is the model base class for the table "tbl_users_business_tasks".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UsersBusinessTasks".
 *
 * Columns in table "tbl_users_business_tasks" available as properties of the model,
 * followed by relations of table "tbl_users_business_tasks" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idUsersBusiness
 * @property integer $idUserState
 * @property integer $idUserCreated
 * @property integer $idUserAsigned
 * @property integer $idTasksAction
 * @property string $date
 * @property string $comments
 * @property integer $value
 * @property integer $state
 * @property integer $is_contact
 * @property string $dateCreated
 *
 * @property TasksActions $idTasksAction0
 * @property Users $idUsersBusiness0
 * @property Users $idUserCreated0
 * @property Users $idUserAsigned0
 * @property UsersState $idUserState0
 * @property UsersBusinessTasksSupport[] $usersBusinessTasksSupports
 */
abstract class BaseUsersBusinessTasks extends GxActiveRecord {
    
    public $support;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_users_business_tasks';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'UsersBusinessTasks|UsersBusinessTasks', $n);
	}

	public static function representingColumn() {
		return 'comments';
	}

	public function rules() {
		return array(
			array('idUsersBusiness, comments, date, idTasksAction, idUserState', 'required'),
                        array('idUserState, comments', 'required', 'on' => 'complete,support'),
                        array('support', 'required', 'on' => 'support'),
			array('idUsersBusiness, idUserState, idUserCreated, idUserAsigned, idTasksAction, value, state, is_contact', 'numerical', 'integerOnly'=>true),
			array('date', 'type', 'type' => 'date', 'message' => '{attribute}: is not a date!', 'dateFormat' => 'yyyy-MM-dd'),
			array('date, comments', 'safe'),
			array('idUserState, idUserCreated, idUserAsigned, idTasksAction, date, value, state, is_contact', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idUsersBusiness, idUserState, idUserCreated, idUserAsigned, idTasksAction, date, comments, value, state, is_contact, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idTasksAction0' => array(self::BELONGS_TO, 'TasksActions', 'idTasksAction'),
			'idUsersBusiness0' => array(self::BELONGS_TO, 'Users', 'idUsersBusiness'),
			'idUserCreated0' => array(self::BELONGS_TO, 'Users', 'idUserCreated'),
			'idUserAsigned0' => array(self::BELONGS_TO, 'Users', 'idUserAsigned'),
			'idUserState0' => array(self::BELONGS_TO, 'UsersState', 'idUserState'),
			'usersBusinessTasksSupports' => array(self::HAS_MANY, 'UsersBusinessTasksSupport', 'idUserBusinessTask'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idUsersBusiness' => Yii::t('front', 'Negocio'),
			'idUserState' => Yii::t('front', 'Estado Negocio'),
			'idUserCreated' => Yii::t('front', 'Creador'),
			'idUserAsigned' => Yii::t('front', 'Asignado'),
			'idTasksAction' => Yii::t('front', 'AcciÃ³n'),
			'date' => Yii::t('app', 'Fecha'),
			'comments' => Yii::t('app', 'Comentarios'),
                        'value' => Yii::t('app', 'Valor'),
                        'state' => Yii::t('app', 'Estado'),
                        'is_contact' => Yii::t('app', 'Hizo Contacto'),
                        'support' => Yii::t('app', 'Soporte'),
			'dateCreated' => Yii::t('app', 'Fecha de CreaciÃ³n'),
			'idTasksAction0' => null,
			'idUsersBusiness0' => null,
			'idUserCreated0' => null,
			'idUserAsigned0' => null,
			'idUserState0' => null,
			'usersBusinessTasksSupports' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idUsersBusiness', $this->idUsersBusiness);
		$criteria->compare('idUserState', $this->idUserState);
		$criteria->compare('idUserCreated', $this->idUserCreated);
		$criteria->compare('idUserAsigned', $this->idUserAsigned);
		$criteria->compare('idTasksAction', $this->idTasksAction);
		$criteria->compare('date', $this->date, true);
		$criteria->compare('comments', $this->comments, true);
                $criteria->compare('value', $this->value); 
                $criteria->compare('state', $this->state); 
                $criteria->compare('is_contact', $this->is_contact); 
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}