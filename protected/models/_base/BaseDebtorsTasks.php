<?php

/**
 * This is the model base class for the table "tbl_debtors_tasks".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "DebtorsTasks".
 *
 * Columns in table "tbl_debtors_tasks" available as properties of the model,
 * followed by relations of table "tbl_debtors_tasks" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idDebtor
 * @property integer $idDebtorDebt
 * @property integer $idDebtorState
 * @property integer $idDebtorSubstate
 * @property integer $idUserCreated
 * @property integer $idUserAsigned
 * @property integer $idTasksAction
 * @property integer $idTasksEffect
 * @property string $date
 * @property string $comments
 * @property integer $value
 * @property integer $state
 * @property integer $is_contact
 * @property string $dateCreated
 *
 * @property DebtorsObligations $idDebtor0
 * @property DebtorsDebts $idDebtorDebt0
 * @property DebtorsState $idDebtorState0
 * @property TasksActions $idTasksAction0
 * @property TasksActions $idTasksEffect0
 * @property Users $idUserCreated0
 * @property Users $idUserAsigned0
 * @property DebtorsTasksSupport[] $debtorsTasksSupports
 */
abstract class BaseDebtorsTasks extends GxActiveRecord {

    public $support;
    
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_debtors_tasks';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'DebtorsTasks|DebtorsTasks', $n);
	}

	public static function representingColumn() {
		return 'comments';
	}
        
        public function getCallInfo(){
//            $this->call = null;
//            if($this->support != NULL && $this->support != '' && Controller::isJSON($this->support)){                
//                $this->call = CJSON::decode($this->support,TRUE);
//            }
//            return $this->call;
        }

	public function rules() {
		return array(
			array('idDebtorDebt, idUserCreated, idUserAsigned, idTasksAction, date', 'required'),
			array('idDebtorState, comments', 'required', 'on' => 'complete,support,agreement,call'),
			array('value', 'required', 'on' => 'agreement'),
			array('support', 'required', 'on' => 'support,call'),
                        array('support', 'match', 'pattern'=>'/\.(gif|jpg|jpeg|png|pdf|tiff)$/i','message'=>Yii::t('err','El {attribute} es inválido, Solo los archivos con estas extensiones son permitidos: gif, jpg, jpeg, png, tiff, pdf'), 'allowEmpty'=>true, 'on' => 'support'),		
			array('idDebtor, idDebtorDebt, idDebtorState, idDebtorSubstate, idUserCreated, idUserAsigned, idTasksAction, idTasksEffect, value, state, is_contact', 'numerical', 'integerOnly'=>true),
                        array('date', 'type', 'type' => 'date', 'message' => '{attribute}: is not a date!', 'dateFormat' => 'yyyy-MM-dd'),
			array('date, comments, support', 'safe'),
			array('idDebtor, idDebtorDebt, idDebtorState, idDebtorSubstate, idUserCreated, idUserAsigned, idTasksAction, idTasksEffect, date, value, state, is_contact', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idDebtor, idDebtorDebt, idDebtorState, idDebtorSubstate, idUserCreated, idUserAsigned, idTasksAction, idTasksEffect, date, comments, value, state, is_contact, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idDebtor0' => array(self::BELONGS_TO, 'DebtorsObligations', 'idDebtor'),
                        'idDebtorDebt0' => array(self::BELONGS_TO, 'DebtorsDebts', 'idDebtorDebt'),
                        'idDebtorState0' => array(self::BELONGS_TO, 'DebtorsState', 'idDebtorState'),
			'idTasksAction0' => array(self::BELONGS_TO, 'TasksActions', 'idTasksAction'),
			'idTasksEffect0' => array(self::BELONGS_TO, 'TasksActions', 'idTasksEffect'),
			'idUserCreated0' => array(self::BELONGS_TO, 'Users', 'idUserCreated'),
			'idUserAsigned0' => array(self::BELONGS_TO, 'Users', 'idUserAsigned'),
                        'debtorsTasksSupports' => array(self::HAS_MANY, 'DebtorsTasksSupport', 'idDebtorTask'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idDebtor' => Yii::t('front', 'Deudor'),
                        'idDebtorDebt' => null,
                        'idDebtorState' => Yii::t('front', 'Estado Deudor'),
                        'idDebtorSubstate' => Yii::t('app', 'Sub Estado Deudor'),
			'idUserCreated' => Yii::t('front', 'Creador'),
			'idUserAsigned' => Yii::t('front', 'Asignado'),
			'idTasksAction' => Yii::t('front', 'Acción'),
			'idTasksEffect' => Yii::t('front', 'Efecto'),
			'date' => Yii::t('front', 'Fecha'),
			'comments' => Yii::t('front', 'Comentarios'),
                        'value' => Yii::t('app', 'Valor'),
			'state' => Yii::t('front', 'Estado'),
                        'is_contact' => Yii::t('app', 'Hizo Contacto?'),
			'dateCreated' => Yii::t('app', 'Fecha Creación'),
			'support' => Yii::t('app', 'Soporte'),
			'idDebtor0' => null,
                        'idDebtorDebt0' => null,
                        'idDebtorState0' => null,
			'idTasksAction0' => null,
			'idTasksEffect0' => null,
			'idUserCreated0' => null,
			'idUserAsigned0' => null,
                        'debtorsTasksSupports' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idDebtor', $this->idDebtor);
                $criteria->compare('idDebtorDebt', $this->idDebtorDebt);
                $criteria->compare('idDebtorState', $this->idDebtorState);
                $criteria->compare('idDebtorSubstate', $this->idDebtorSubstate);
		$criteria->compare('idUserCreated', $this->idUserCreated);
		$criteria->compare('idUserAsigned', $this->idUserAsigned);
		$criteria->compare('idTasksAction', $this->idTasksAction);
		$criteria->compare('idTasksEffect', $this->idTasksEffect);
		$criteria->compare('date', $this->date, true);
		$criteria->compare('comments', $this->comments, true);
                $criteria->compare('value', $this->value);
		$criteria->compare('state', $this->state);
                $criteria->compare('is_contact', $this->is_contact);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}