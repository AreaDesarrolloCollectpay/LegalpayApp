<?php

/**
 * This is the model base class for the table "tbl_users".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Users".
 *
 * Columns in table "tbl_users" available as properties of the model,
 * followed by relations of table "tbl_users" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idCity
 * @property integer $idTypeDocument
 * @property integer $idUserCreator
 * @property integer $idCompany
 * @property string $numberDocument
 * @property string $name
 * @property string $userName
 * @property string $email
 * @property string $password
 * @property string $image
 * @property string $mobile
 * @property string $phone
 * @property string $address
 * @property string $lat
 * @property string $lng
 * @property integer $notification
 * @property integer $active
 * @property string $contact
 * @property integer $commission
 * @property integer $commission_legal
 * @property string $interests
 * @property integer $fee
 * @property integer $cant_call
 * @property string $call_ext
 * @property integer $require_ckeck_terms
 * @property integer $check_terms
 * @property string $date_check_terms
 * @property string $conc_login
 * @property string $dateCreated
 *
 * @property AssignmentsDebtorsAdvisers[] $assignmentsDebtorsAdvisers
 * @property AssignmentsDebtorsAdvisers[] $assignmentsDebtorsAdvisers1
 * @property Campaigns[] $campaigns
 * @property CampaignsCoordinators[] $campaignsCoordinators
 * @property Centroids[] $centroids
 * @property Centroids[] $centroids1
 * @property CoordinatorAdviser[] $coordinatorAdvisers
 * @property CoordinatorAdviser[] $coordinatorAdvisers1
 * @property Debtors[] $debtors
 * @property DebtorsAddresses[] $debtorsAddresses
 * @property DebtorsAgreements[] $debtorsAgreements
 * @property DebtorsComments[] $debtorsComments
 * @property DebtorsContacts[] $debtorsContacts
 * @property DebtorsDebtsReports[] $debtorsDebtsReports
 * @property DebtorsEmails[] $debtorsEmails
 * @property DebtorsPayments[] $debtorsPayments
 * @property DebtorsPhones[] $debtorsPhones
 * @property DebtorsProperty[] $debtorsProperties
 * @property DebtorsReference[] $debtorsReferences
 * @property DebtorsSpendings[] $debtorsSpendings
 * @property DebtorsSupports[] $debtorsSupports
 * @property DebtorsTasks[] $debtorsTasks
 * @property DebtorsTasks[] $debtorsTasks1
 * @property DebtorsTasksSupport[] $debtorsTasksSupports
 * @property Mlmodels[] $mlmodels
 * @property Mlmodels[] $mlmodels1
 * @property PlansCompanies[] $plansCompanies
 * @property ReferralsCampaigns[] $referralsCampaigns
 * @property Suggestions[] $suggestions
 * @property Cities $idCity0
 * @property TypeDocuments $idTypeDocument0
 * @property Users $idCompany0
 * @property Users[] $users
 * @property UsersBusiness[] $usersBusinesses
 * @property UsersBusiness[] $usersBusinesses1
 * @property UsersBusiness[] $usersBusinesses2
 * @property UsersBusinessSpendings[] $usersBusinessSpendings
 * @property UsersBusinessTasks[] $usersBusinessTasks
 * @property UsersBusinessTasks[] $usersBusinessTasks1
 * @property UsersBusinessTasksSupport[] $usersBusinessTasksSupports
 * @property UsersContacts[] $usersContacts
 * @property UsersDocuments[] $usersDocuments
 * @property UsersEmails[] $usersEmails
 * @property UsersEmails[] $usersEmails1
 * @property UsersImport[] $usersImports
 * @property UsersImport[] $usersImports1
 * @property UsersInfo[] $usersInfos
 * @property UsersInvoices[] $usersInvoices
 * @property UsersInvoices[] $usersInvoices1
 * @property UsersNotifications[] $usersNotifications
 * @property UsersPhones[] $usersPhones
 * @property UsersPhones[] $usersPhones1
 * @property UsersPolitical[] $usersPoliticals
 * @property UsersProfiles[] $usersProfiles
 */
abstract class BaseUsers extends GxActiveRecord {

        public $newPassword;
        public $confirmPassword;
        public $idCountry;
        public $idDepartment;
        public $idUserProfile;
        public $is_internal;
        public $idCoordinator;
        public $idTypeProcess;
        public $indicativePhone;
        
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_users';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Users|Users', $n);
	}

	public static function representingColumn() {
		return 'image';
	} 
        
         public function afterFind(){            
            if($this->idCity != NULL){                
                $city = ViewLocation::model()->find(array('condition' => 't.idCity ='.$this->idCity));
                if($city != null){                    
                    $this->idDepartment = $city->idDepartment;
                    $this->idCountry = $city->idCountry;
                }
            }
            parent::afterFind();
        }
        
        public function rules() {
		return array(
			array('image, name, userName, password, idCity, notification, is_internal', 'required'),
			array('newPassword, confirmPassword', 'required','on' => 'changePass'),
			array('idDepartment, idCountry, idCity, idUserProfile', 'required','on' => 'Users,Advisers'),
			//array('idCoordinator', 'required','on' => 'Advisers'),
            array('idTypeProcess', 'required','on' => 'Advisers'),
                        array('newPassword', 'length', 'min' => 8),
                        array('newPassword', 'match', 'pattern' => '/^.*(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).*$/', 'message' => Yii::t('front', '{attribute} debe contener al menos un carácter en mayúscula y minúscula y un dígito.')),
                        array('confirmPassword', 'compare', 'compareAttribute' => 'newPassword','on' => 'changePass'),
			array('email', 'email'),
			array('email, userName', 'unique'),
                        array('phone','match', 'pattern' => '/^[1-9]\d{6}$/','message' => '{attribute} inválido'),
                        array('mobile','match', 'pattern' => '/^3[\d]{9}$/','message' => '{attribute} inválido'),
			array('idCity, idTypeDocument, idUserCreator, idCompany, notification, active, cant_call, require_ckeck_terms, check_terms', 'numerical', 'integerOnly'=>true),
			array('image', 'length', 'max'=>300),
                        array('call_ext', 'length', 'max'=>50),
			array('numberDocument, name, userName, email, password, mobile, phone, address, lat, lng, contact, dateCreated, newPassword, confirmPassword, idCountry, idDepartment, idCity, idUserProfile, idCoordinator, idTypeProcess, is_internal, conc_login', 'safe'),
			array('idCity, idTypeDocument, idUserCreator, idCompany, numberDocument, name, userName, email, password, mobile, phone, address, lat, lng, notification, active, contact, commission,  commission_legal, interests, fee, cant_call, call_ext, require_ckeck_terms, check_terms, date_check_terms, conc_login', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idCountry, idDepartment, idCity, idTypeDocument, idUserCreator, idCompany, numberDocument, name, userName, email, password, image, mobile, phone, address,  lat, lng, notification, active, contact, commission, commission_legal, interests, fee, cant_call, call_ext, require_ckeck_terms, check_terms, date_check_terms, conc_login, dateCreated, is_internal, idUserProfile, idCoordinator, idTypeProcess',  'safe', 'on'=>'search'),
		);
	}
        
        public function getIndicativePhone(){
            $this->indicativePhone = '';
            if($this->idCity != NULL){                
                $city = Cities::model()->findByPk($this->idCity);
                if($city != null){                    
                    $this->indicativePhone = $city->idDepartment0->indicative;
                }
            }
            return $this->indicativePhone;
        }

	public function relations() {
		return array(
                        'assignmentsDebtorsAdvisers' => array(self::HAS_MANY, 'AssignmentsDebtorsAdvisers', 'idAdviser'),
			'assignmentsDebtorsAdvisers1' => array(self::HAS_MANY, 'AssignmentsDebtorsAdvisers', 'idUserCreator'),
			'campaigns' => array(self::HAS_MANY, 'Campaigns', 'idCustomer'),
			'campaignsCoordinators' => array(self::HAS_MANY, 'CampaignsCoordinators', 'idCoordinator'),
                        'centroids' => array(self::HAS_MANY, 'Centroids', 'idCustomer'),
			'centroids1' => array(self::HAS_MANY, 'Centroids', 'idCreator'),
            'coordinatorAdvisers' => array(self::HAS_MANY, 'CoordinatorAdviser', 'idCoordinator'),
			'typeProcess' => array(self::HAS_MANY, 'TypeProcess', 'idTypeProcess'),
                        'coordinatorAdvisers1' => array(self::HAS_MANY, 'CoordinatorAdviser', 'idAdviser'),
                        'debtors' => array(self::HAS_MANY, 'Debtors', 'idCustomers'),
                        'debtorsAddresses' => array(self::HAS_MANY, 'DebtorsAddresses', 'idUserAddress'),
                        'debtorsAgreements' => array(self::HAS_MANY, 'DebtorsAgreements', 'idUserAgreement'),
                        'debtorsComments' => array(self::HAS_MANY, 'DebtorsComments', 'idUserComment'),
                        'debtorsContacts' => array(self::HAS_MANY, 'DebtorsContacts', 'idUserCreated'),
                        'debtorsDebtsReports' => array(self::HAS_MANY, 'DebtorsDebtsReports', 'idCreator'),
                        'debtorsEmails' => array(self::HAS_MANY, 'DebtorsEmails', 'idUserEmail'),
			'debtorsPayments' => array(self::HAS_MANY, 'DebtorsPayments', 'idUserPayments'),
                        'debtorsPhones' => array(self::HAS_MANY, 'DebtorsPhones', 'idUserPhone'),
                        'debtorsProperties' => array(self::HAS_MANY, 'DebtorsProperty', 'idUserProperty'),
                        'debtorsReferences' => array(self::HAS_MANY, 'DebtorsReference', 'idUserReference'),
                        'debtorsSpendings' => array(self::HAS_MANY, 'DebtorsSpendings', 'idUserSpending'),
                        'debtorsSupports' => array(self::HAS_MANY, 'DebtorsSupports', 'idUserSupport'),
                        'debtorsTasks' => array(self::HAS_MANY, 'DebtorsTasks', 'idUserCreated'),
			'debtorsTasks1' => array(self::HAS_MANY, 'DebtorsTasks', 'idUserAsigned'),
                        'debtorsTasksSupports' => array(self::HAS_MANY, 'DebtorsTasksSupport', 'idUserSupport'),
                        'mlmodels' => array(self::HAS_MANY, 'Mlmodels', 'idCompany'),
			'mlmodels1' => array(self::HAS_MANY, 'Mlmodels', 'idCreator'),
                        'plansCompanies' => array(self::HAS_MANY, 'PlansCompanies', 'idCompany'),
			'referralsCampaigns' => array(self::HAS_MANY, 'ReferralsCampaigns', 'idCustomer'),
                        'suggestions' => array(self::HAS_MANY, 'Suggestions', 'idCreator'),
			'idCity0' => array(self::BELONGS_TO, 'Cities', 'idCity'),
                        'idTypeDocument0' => array(self::BELONGS_TO, 'TypeDocuments', 'idTypeDocument'),
                        'idCompany0' => array(self::BELONGS_TO, 'Users', 'idCompany'),
			'users' => array(self::HAS_MANY, 'Users', 'idCompany'),
                        'usersBusinesses' => array(self::HAS_MANY, 'UsersBusiness', 'idUser'),
                        'usersBusinesses1' => array(self::HAS_MANY, 'UsersBusiness', 'idUserBusiness'),
			'usersBusinesses2' => array(self::HAS_MANY, 'UsersBusiness', 'idBusinessAdvisor'),
                        'usersBusinessSpendings' => array(self::HAS_MANY, 'UsersBusinessSpendings', 'idUserSpending'),
                        'usersBusinessTasks' => array(self::HAS_MANY, 'UsersBusinessTasks', 'idUserCreated'),
			'usersBusinessTasks1' => array(self::HAS_MANY, 'UsersBusinessTasks', 'idUserAsigned'),
			'usersBusinessTasksSupports' => array(self::HAS_MANY, 'UsersBusinessTasksSupport', 'idUserBusinessSupport'),
                        'usersContacts' => array(self::HAS_MANY, 'UsersContacts', 'idUser'),
                        'usersDocuments' => array(self::HAS_MANY, 'UsersDocuments', 'idUser'),
                        'usersEmails' => array(self::HAS_MANY, 'UsersEmails', 'idUserEmail'),
			'usersEmails1' => array(self::HAS_MANY, 'UsersEmails', 'idUser'),
                        'usersImports' => array(self::HAS_MANY, 'UsersImport', 'idCustomer'),
			'usersImports1' => array(self::HAS_MANY, 'UsersImport', 'idUserCreated'),
                        'usersInfos' => array(self::HAS_MANY, 'UsersInfo', 'idUser'),
                        'usersInvoices' => array(self::HAS_MANY, 'UsersInvoices', 'idUser'),
			'usersInvoices1' => array(self::HAS_MANY, 'UsersInvoices', 'idUserCreator'),
                        'usersNotifications' => array(self::HAS_MANY, 'UsersNotifications', 'idUser'),
                        'usersPhones' => array(self::HAS_MANY, 'UsersPhones', 'idUserPhone'),
			'usersPhones1' => array(self::HAS_MANY, 'UsersPhones', 'idUser'),
                        'usersPoliticals' => array(self::HAS_MANY, 'UsersPolitical', 'idUser'),
			'usersProfiles' => array(self::HAS_MANY, 'UsersProfiles', 'idUser'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idUserState' => Yii::t('front', 'Estado'),
			'idCity' => Yii::t('front', 'Ciudad'),
                        'idTypeDocument' => Yii::t('front', 'Tipo de Documento'),
			'idUserCreator' => Yii::t('app', 'Id User Creator'),
                        'idCompany' => Yii::t('app', 'Id Empresa'),
			'numberDocument' => Yii::t('app', 'Numéro de documento'),
			'name' => Yii::t('app', 'Nombres'),
			'userName' => Yii::t('app', 'Nombre de Usuario'),
			'email' => Yii::t('app', 'Email'),
			'password' => Yii::t('app', 'Contraseña'),
			'image' => Yii::t('app', 'Imagen'),
			'mobile' => Yii::t('app', 'Celular'),
			'phone' => Yii::t('app', 'Teléfono'),
			'address' => Yii::t('app', 'Dirección'),
                        'lat' => Yii::t('app', 'Latitud'),
			'lng' => Yii::t('app', 'Longitud'),
			'notification' => Yii::t('app', 'Notificación'),
			'active' => Yii::t('app', 'Activo'),
			'contact' => Yii::t('app', 'Contacto'),
			'commission' => Yii::t('app', 'Comisión'),
                        'commission_legal' => Yii::t('app', 'Comisión Legal'),
			'interests' => Yii::t('app', 'Intereses'),
			'fee' => Yii::t('app', 'Honorarios'),
                        'cant_call' => Yii::t('app', 'Puede Llamar'),
                        'call_ext' => Yii::t('app', 'Numero de extension'),
                        'require_ckeck_terms' => Yii::t('app', 'Requiere Políticas de privacidad'),
                        'check_terms' => Yii::t('app', 'Políticas de privacidad'),
                        'date_check_terms' => Yii::t('app', 'Fecha aceptación políticas de privacidad'),
                        'conc_login' => Yii::t('app', 'Conc Login'),
			'dateCreated' => Yii::t('app', 'Fecha de Creación'),
                        'assignmentsDebtorsAdvisers' => null,
                        'assignmentsDebtorsAdvisers1' => null,
			'newPassword' => Yii::t('app', 'Nueva Contraseña'),
			'confirmPassword' => Yii::t('app', 'Repetir nueva Contraseña'),
                        'idCountry' => Yii::t('front', 'País'),
                        'idDepartment' => Yii::t('front', 'Departamento'),
                        'idUserProfile' => Yii::t('front','Perfil'),
                        'idCoordinator' => Yii::t('front', 'Coordinador'),
                        'idTypeProcess' => Yii::t('front', 'Tipo de Proceso'),
                        'is_internal' => Yii::t('front', 'Interno'),
			'campaigns' => null,
                        'campaignsCoordinators' => null,
                        'centroids' => null,
			'centroids1' => null,
			'coordinatorAdvisers' => null,
                        'coordinatorAdvisers1' => null,
                        'debtors' => null,
                        'debtorsAddresses' => null,
                        'debtorsAgreements' => null,
                        'debtorsComments' => null,
                        'debtorsContacts' => null,
                        'debtorsDebtsReports' => null,
                        'debtorsEmails' => null,
			'debtorsPayments' => null,
                        'debtorsPhones' => null,
                        'debtorsProperties' => null,
                        'debtorsReferences' => null,
                        'debtorsSpendings' => null,
                        'debtorsSupports' => null,
                        'debtorsTasks' => null,
			'debtorsTasks1' => null,
                        'debtorsTasksSupports' => null,
                        'mlmodels' => null,
			'mlmodels1' => null,
                        'plansCompanies' => null,
			'referralsCampaigns' => null,
                        'suggestions' => null,
			'idCity0' => null,
                        'idTypeDocument0' => null,
                        'idCompany0' => null,
                        'users' => null,
                        'usersBusinesses' => null,
                        'usersBusinesses1' => null,
			'usersBusinesses2' => null,
                        'usersBusinessSpendings' => null,
                        'usersBusinessTasks' => null,
			'usersBusinessTasks1' => null,
			'usersBusinessTasksSupports' => null,
                        'usersContacts' => null,
                        'usersDocuments' => null,
                        'usersEmails' => null,
                        'usersEmails1' => null,
                        'usersImports' => null,
                        'usersImports1' => null,
                        'usersInfos' => null,
                        'usersInvoices' => null,
			'usersInvoices1' => null,
                        'usersNotifications' => null,
                        'usersPhones' => null,
			'usersPhones1' => null,
                        'usersPoliticals' => null,
			'usersProfiles' => null,
		);
	}        

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idCity', $this->idCity);
                $criteria->compare('idTypeDocument', $this->idTypeDocument);
		$criteria->compare('idUserCreator', $this->idUserCreator);
                $criteria->compare('idCompany', $this->idCompany);
		$criteria->compare('numberDocument', $this->numberDocument, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('userName', $this->userName, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('mobile', $this->mobile, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('address', $this->address, true);
                $criteria->compare('lat', $this->lat, true);
		$criteria->compare('lng', $this->lng, true);
		$criteria->compare('notification', $this->notification);
		$criteria->compare('active', $this->active);
		$criteria->compare('contact', $this->contact, true);
		$criteria->compare('commission', $this->commission);
                $criteria->compare('commission_legal', $this->commission_legal);
                $criteria->compare('interests', $this->interests, true);
		$criteria->compare('fee', $this->fee);
                $criteria->compare('cant_call', $this->cant_call);
		$criteria->compare('call_ext', $this->call_ext, true);
                $criteria->compare('require_ckeck_terms', $this->require_ckeck_terms);
		$criteria->compare('check_terms', $this->check_terms);
		$criteria->compare('date_check_terms', $this->date_check_terms, true);
                $criteria->compare('conc_login', $this->conc_login, true);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}