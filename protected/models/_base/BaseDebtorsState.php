<?php

/**
 * This is the model base class for the table "tbl_debtors_state".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "DebtorsState".
 *
 * Columns in table "tbl_debtors_state" available as properties of the model,
 * followed by relations of table "tbl_debtors_state" available as properties of the model.
 *
 * @property integer $id
 * @property integer $is_legal
 * @property integer $is_contact
 * @property integer $historic
 * @property integer $idDebtorsState
 * @property string $name
 * @property string $color
 * @property integer $active
 * @property integer $daysAlert
 * @property integer $order
 * @property string $dateCreated
 *
 * @property Debtors[] $debtors
 * @property DebtorsObligations[] $debtorsObligations
 * @property DebtorsPayments[] $debtorsPayments
 * @property DebtorsState $idDebtorsState0
 * @property DebtorsState[] $debtorsStates
 * @property DebtorsTasks[] $debtorsTasks
 */
abstract class BaseDebtorsState extends GxActiveRecord {
    
    public $capital;
    public $cant;
    public $date;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_debtors_state';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'DebtorsState|DebtorsStates', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, color, dateCreated', 'required'),
			array('is_legal, is_contact, historic, idDebtorsState, active, daysAlert, order', 'numerical', 'integerOnly'=>true),
			array('color', 'length', 'max'=>50),
			array('is_legal, is_contact, historic, idDebtorsState, active, daysAlert, order', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, is_legal, is_contact, historic, idDebtorsState, name, color, active, daysAlert, order, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'debtors' => array(self::HAS_MANY, 'Debtors', 'idDebtorsState'),
			'debtorsObligations' => array(self::HAS_MANY, 'DebtorsObligations', 'idDebtorsState'),
                        'debtorsPayments' => array(self::HAS_MANY, 'DebtorsPayments', 'idDebtorState'),
			'idDebtorsState0' => array(self::BELONGS_TO, 'DebtorsState', 'idDebtorsState'),
			'debtorsStates' => array(self::HAS_MANY, 'DebtorsState', 'idDebtorsState'),
			'debtorsTasks' => array(self::HAS_MANY, 'DebtorsTasks', 'idDebtorState'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'is_legal' => Yii::t('app', 'Is Legal'),
                        'is_contact' => Yii::t('app', 'Is Contact'),
			'historic' => Yii::t('app', 'Historic'),
			'idDebtorsState' => null,
			'name' => Yii::t('app', 'Name'),
			'color' => Yii::t('app', 'Color'),
			'active' => Yii::t('app', 'Active'),
                        'daysAlert' => Yii::t('app', 'Days Alert'),
                        'order' => Yii::t('app', 'Order'),
			'dateCreated' => Yii::t('app', 'Date Created'),
			'debtors' => null,
			'debtorsObligations' => null,
                        'debtorsPayments' => null,
			'idDebtorsState0' => null,
			'debtorsStates' => null,
			'debtorsTasks' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('is_legal', $this->is_legal);
                $criteria->compare('is_contact', $this->is_contact);
		$criteria->compare('historic', $this->historic);
		$criteria->compare('idDebtorsState', $this->idDebtorsState);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('color', $this->color, true);
		$criteria->compare('active', $this->active);
                $criteria->compare('daysAlert', $this->daysAlert);
                $criteria->compare('order', $this->order);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}