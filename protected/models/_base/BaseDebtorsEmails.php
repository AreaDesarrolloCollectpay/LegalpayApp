<?php

/**
 * This is the model base class for the table "tbl_debtors_emails".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "DebtorsEmails".
 *
 * Columns in table "tbl_debtors_emails" available as properties of the model,
 * followed by relations of table "tbl_debtors_emails" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idUserEmail
 * @property integer $idDebtor
 * @property integer $idTypeReference
 * @property string $name
 * @property string $email
 * @property string $comment
 * @property integer $active
 * @property string $dateCreated
 *
 * @property Debtors $idDebtor0
 * @property TypeReference $idTypeReference0
 * @property Users $idUserEmail0
 */
abstract class BaseDebtorsEmails extends GxActiveRecord {
    
    public $state; 

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_debtors_emails';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'DebtorsEmails|DebtorsEmails', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('idUserEmail, idDebtor, idTypeReference, name, email, active', 'required'),
			array('idUserEmail, idDebtor, idTypeReference, active', 'numerical', 'integerOnly'=>true),
			array('name, email', 'length', 'max'=>500),
			array('email', 'email'),
                        array('comment', 'safe'),
			array('idUserEmail, idDebtor, idTypeReference, active', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idUserEmail, idDebtor, idTypeReference, name, email, comment, active, dateCreated', 'safe', 'on'=>'search'),
		);
	}
        
        public function afterFind(){
            parent::afterFind();                        
            
            $this->state = Yii::t('front', 'Por validar');
            if($this->active == 1){
                $this->state = Yii::t('front', 'Localizado');                
            }elseif($this->active == 2){
                $this->state = Yii::t('front', 'Ilocalizado');
            }
        }
        
        public function afterSave() {
            parent::afterSave();
                        
            $this->state = Yii::t('front', 'Por validar');
            if($this->active == 1){
                $this->state = Yii::t('front', 'Localizado');                
            }elseif($this->active == 2){
                $this->state = Yii::t('front', 'Ilocalizado');
            }
        }

	public function relations() {
		return array(
			'idDebtor0' => array(self::BELONGS_TO, 'Debtors', 'idDebtor'),
			'idTypeReference0' => array(self::BELONGS_TO, 'TypeReference', 'idTypeReference'),
			'idUserEmail0' => array(self::BELONGS_TO, 'Users', 'idUserEmail'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idUserEmail' => Yii::t('front', 'Usuario'),
			'idDebtor' => Yii::t('front', 'Deudor'),
			'idTypeReference' => Yii::t('front', 'Tipo'),
			'name' => Yii::t('front', 'Nombre'),
			'email' => Yii::t('front', 'Email'),
			'comment' => Yii::t('front', 'Comentario'),
			'active' => Yii::t('front', 'Estado'),
			'dateCreated' => Yii::t('front', 'Fecha de CreaciÃ³n'),
			'idDebtor0' => null,
			'idTypeReference0' => null,
			'idUserEmail0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idUserEmail', $this->idUserEmail);
		$criteria->compare('idDebtor', $this->idDebtor);
		$criteria->compare('idTypeReference', $this->idTypeReference);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('comment', $this->comment, true);
		$criteria->compare('active', $this->active);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}