<?php

/**
 * This is the model base class for the table "tbl_users_info".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UsersInfo".
 *
 * Columns in table "tbl_users_info" available as properties of the model,
 * followed by relations of table "tbl_users_info" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idUser
 * @property string $web
 * @property string $legal_representative
 * @property string $id_representative
 * @property string $email_representative
 * @property integer $regime
 * @property integer $regime_special
 * @property string $regime_special_type
 * @property integer $great_retainer
 * @property string $great_retainer_number
 * @property string $great_retainer_date
 * @property integer $auto_retainer
 * @property string $auto_retainer_number
 * @property string $auto_retainer_date
 * @property string $code_ica
 * @property integer $ica
 * @property string $code_rent
 * @property integer $iva
 * @property string $concept_rent
 * @property integer $rent
 * @property integer $type_activity
 * @property string $other_activity
 * @property string $number_activity
 * @property string $name_bank
 * @property string $account_number
 * @property string $support_bank
 * @property string $account_type
 * @property string $financial_contact
 * @property string $financial_phone
 * @property string $shopping_contact
 * @property string $shopping_phone
 * @property string $dateCreated
 *
 * @property Users $idUser0
 */
abstract class BaseUsersInfo extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_users_info';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'UsersInfo|UsersInfos', $n);
	}

	public static function representingColumn() {
		return 'dateCreated';
	}

	public function rules() {
		return array(
			array('idUser', 'required'),
			array('idUser, regime, regime_special, great_retainer, auto_retainer, ica, iva, rent, type_activity', 'numerical', 'integerOnly'=>true),
			array('web, legal_representative, id_representative, email_representative, regime_special_type, great_retainer_number, auto_retainer_number', 'length', 'max'=>500),
			array('code_ica, code_rent, concept_rent, other_activity, number_activity, name_bank, account_number, account_type, financial_contact, financial_phone, shopping_contact, shopping_phone', 'length', 'max'=>50),
			array('great_retainer_date, auto_retainer_date', 'safe'),                        
			array('web, legal_representative, id_representative, email_representative, regime, regime_special, regime_special_type, great_retainer, great_retainer_number, great_retainer_date, auto_retainer, auto_retainer_number, auto_retainer_date, code_ica, ica, code_rent, iva, concept_rent, rent, type_activity, other_activity, number_activity, name_bank, account_number, account_type, financial_contact, financial_phone, shopping_contact, shopping_phone', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idUser, web, legal_representative, id_representative, email_representative, regime, regime_special, regime_special_type, great_retainer, great_retainer_number, great_retainer_date, auto_retainer, auto_retainer_number, auto_retainer_date, code_ica, ica, code_rent, iva, concept_rent, rent, type_activity, other_activity, number_activity, name_bank, account_number, account_type, financial_contact, financial_phone, shopping_contact, shopping_phone, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idUser0' => array(self::BELONGS_TO, 'Users', 'idUser'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idUser' => Yii::t('app', 'Id User'),
			'web' => Yii::t('app', 'Web'),
			'legal_representative' => Yii::t('app', 'Legal Representative'),
			'id_representative' => Yii::t('app', 'Id Representative'),
			'email_representative' => Yii::t('app', 'Email Representative'),
			'regime' => Yii::t('app', 'Regime'),
			'regime_special' => Yii::t('app', 'Regime Special'),
			'regime_special_type' => Yii::t('app', 'Regime Special Type'),
			'great_retainer' => Yii::t('app', 'Great Retainer'),
			'great_retainer_number' => Yii::t('app', 'Great Retainer Number'),
			'great_retainer_date' => Yii::t('app', 'Great Retainer Date'),
			'auto_retainer' => Yii::t('app', 'Auto Retainer'),
			'auto_retainer_number' => Yii::t('app', 'Auto Retainer Number'),
			'auto_retainer_date' => Yii::t('app', 'Auto Retainer Date'),
			'code_ica' => Yii::t('app', 'Code Ica'),
			'ica' => Yii::t('app', 'Ica'),
			'code_rent' => Yii::t('app', 'Code Rent'),
			'iva' => Yii::t('app', 'Iva'),
			'concept_rent' => Yii::t('app', 'Concept Rent'),
			'rent' => Yii::t('app', 'Rent'),
			'type_activity' => Yii::t('app', 'Type Activity'),
			'other_activity' => Yii::t('app', 'Other Activity'),
			'number_activity' => Yii::t('app', 'Number Activity'),
			'name_bank' => Yii::t('app', 'Name Bank'),
			'account_number' => Yii::t('app', 'Account Number'),
                        'support_bank' => Yii::t('app', 'CertificaciÃ³n Bancaria'),
			'account_type' => Yii::t('app', 'Account Type'),
			'financial_contact' => Yii::t('app', 'Financial Contact'),
			'financial_phone' => Yii::t('app', 'Financial Phone'),
			'shopping_contact' => Yii::t('app', 'Shopping Contact'),
			'shopping_phone' => Yii::t('app', 'Shopping Phone'),
			'dateCreated' => Yii::t('app', 'Date Created'),
			'idUser0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idUser', $this->idUser);
		$criteria->compare('web', $this->web, true);
		$criteria->compare('legal_representative', $this->legal_representative, true);
		$criteria->compare('id_representative', $this->id_representative, true);
		$criteria->compare('email_representative', $this->email_representative, true);
		$criteria->compare('regime', $this->regime);
		$criteria->compare('regime_special', $this->regime_special);
		$criteria->compare('regime_special_type', $this->regime_special_type, true);
		$criteria->compare('great_retainer', $this->great_retainer);
		$criteria->compare('great_retainer_number', $this->great_retainer_number, true);
		$criteria->compare('great_retainer_date', $this->great_retainer_date, true);
		$criteria->compare('auto_retainer', $this->auto_retainer);
		$criteria->compare('auto_retainer_number', $this->auto_retainer_number, true);
		$criteria->compare('auto_retainer_date', $this->auto_retainer_date, true);
		$criteria->compare('code_ica', $this->code_ica, true);
		$criteria->compare('ica', $this->ica);
		$criteria->compare('code_rent', $this->code_rent, true);
		$criteria->compare('iva', $this->iva);
		$criteria->compare('concept_rent', $this->concept_rent, true);
		$criteria->compare('rent', $this->rent);
		$criteria->compare('type_activity', $this->type_activity);
		$criteria->compare('other_activity', $this->other_activity, true);
		$criteria->compare('number_activity', $this->number_activity, true);
		$criteria->compare('name_bank', $this->name_bank, true);
		$criteria->compare('account_number', $this->account_number, true);
                $criteria->compare('support_bank', $this->support_bank, true);
		$criteria->compare('account_type', $this->account_type, true);
		$criteria->compare('financial_contact', $this->financial_contact, true);
		$criteria->compare('financial_phone', $this->financial_phone, true);
		$criteria->compare('shopping_contact', $this->shopping_contact, true);
		$criteria->compare('shopping_phone', $this->shopping_phone, true);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}