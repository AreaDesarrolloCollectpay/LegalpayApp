<?php

/**
 * This is the model base class for the table "view_payments".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ViewPayments".
 *
 * Columns in table "view_payments" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $idDebtorDebt
 * @property integer $idDebtor
 * @property integer $idPaymentsDiscrimination
 * @property integer $idCustomer
 * @property string $idCoordinator
 * @property double $value
 * @property string $supportPayments
 * @property string $datePay
 * @property string $customer
 * @property string $coordinator
 * @property string $name
 * @property string $code
 * @property string $location
 * @property string $typeDebt
 * @property string $discrimination
 * @property string $whopaid
 * @property string $idAdviser
 * @property string $adviser
 * @property integer $commission
 *
 */
abstract class BaseViewPayments extends GxActiveRecord {
    
    public $month;
    public $age; 

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'view_payments';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ViewPayments|ViewPayments', $n);
	}

	public static function representingColumn() {
		return 'datePay';
	}

	public function rules() {
		return array(
			array('id, idDebtor, idCustomer, value, datePay, typeDebt, idAdviser, commission', 'required'),
			array('id, idDebtorDebt, idDebtor, idPaymentsDiscrimination, idCustomer, commission', 'numerical', 'integerOnly'=>true),
			array('value', 'numerical'),
			array('idCoordinator, idAdviser', 'length', 'max'=>255),
			array('typeDebt', 'length', 'max'=>12),
			array('supportPayments, customer, coordinator, name, code, location, discrimination, whopaid, adviser', 'safe'),
			array('idDebtorDebt, idPaymentsDiscrimination, idCoordinator, supportPayments, customer, coordinator, name, code, location, discrimination, whopaid, adviser', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idDebtorDebt, idDebtor, idPaymentsDiscrimination, idCustomer, idCoordinator, value, supportPayments, datePay, customer, coordinator, name, code, location, typeDebt, discrimination, whopaid, idAdviser, adviser, commission', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idDebtorDebt' => Yii::t('app', 'Id Debtor Debt'),
			'idDebtor' => Yii::t('app', 'Id Debtor'),
			'idPaymentsDiscrimination' => Yii::t('app', 'Id Payments Discrimination'),
			'idCustomer' => Yii::t('app', 'Id Customer'),
			'idCoordinator' => Yii::t('app', 'Id Coordinator'),
			'value' => Yii::t('app', 'Value'),
			'supportPayments' => Yii::t('app', 'Support Payments'),
			'datePay' => Yii::t('app', 'Date Pay'),
			'customer' => Yii::t('app', 'Customer'),
			'coordinator' => Yii::t('app', 'Coordinator'),
			'name' => Yii::t('app', 'Name'),
			'code' => Yii::t('app', 'Code'),
			'location' => Yii::t('app', 'Location'),
			'typeDebt' => Yii::t('app', 'Type Debt'),
			'discrimination' => Yii::t('app', 'Discrimination'),
			'whopaid' => Yii::t('app', 'Whopaid'),
			'idAdviser' => Yii::t('app', 'Id Adviser'),
			'adviser' => Yii::t('app', 'Adviser'),
			'commission' => Yii::t('app', 'Commission'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idDebtorDebt', $this->idDebtorDebt);
		$criteria->compare('idDebtor', $this->idDebtor);
		$criteria->compare('idPaymentsDiscrimination', $this->idPaymentsDiscrimination);
		$criteria->compare('idCustomer', $this->idCustomer);
		$criteria->compare('idCoordinator', $this->idCoordinator, true);
		$criteria->compare('value', $this->value);
		$criteria->compare('supportPayments', $this->supportPayments, true);
		$criteria->compare('datePay', $this->datePay, true);
		$criteria->compare('customer', $this->customer, true);
		$criteria->compare('coordinator', $this->coordinator, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('code', $this->code, true);
		$criteria->compare('location', $this->location, true);
		$criteria->compare('typeDebt', $this->typeDebt, true);
		$criteria->compare('discrimination', $this->discrimination, true);
		$criteria->compare('whopaid', $this->whopaid, true);
		$criteria->compare('idAdviser', $this->idAdviser, true);
		$criteria->compare('adviser', $this->adviser, true);
		$criteria->compare('commission', $this->commission);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}