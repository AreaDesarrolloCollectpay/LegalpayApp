<?php

/**
 * This is the model base class for the table "view_management".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ViewManagement".
 *
 * Columns in table "view_management" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $idDebtorDebt
 * @property integer $idDebtor
 * @property integer $idTasksAction
 * @property integer $state
 * @property integer $idUserAsigned
 * @property integer $idCoordinator
 * @property string $coordinator
 * @property string $adviser
 * @property string $date
 * @property integer $legalManagement
 * @property string $management
 * @property string $comments
 * @property integer $idDebtorState
 * @property integer $is_contact
 * @property string $debtorState
 * @property string $images
 *
 */
abstract class BaseViewManagement extends GxActiveRecord {

    public $countM;
    public $cant;
    public $days;
    public $call;
    
	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'view_management';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ViewManagement|ViewManagements', $n);
	}

	public static function representingColumn() {
		return 'comments';
	}
        
        public function getCallInfo(){
            $this->call = null;
            
            if($this->idTasksAction == 1){                
                $model = DebtorsTasksSupport::model()->find(array('condition' => 'idDebtorTask = '.$this->id));
                if($model != null && ($model->support != NULL && $model->support != '' && Controller::isJSON($model->support))){                
                    $this->call = CJSON::decode($model->support,TRUE);
                }
            }
            
            return $this->call;
        }        

	public function rules() {
		return array(
			array('id, state, comments, is_contact, debtorState, images', 'required'),
			array('id, idDebtorDebt, idDebtor, idTasksAction, state, idUserAsigned, idCoordinator, legalManagement, idDebtorState, is_contact', 'numerical', 'integerOnly'=>true),
			array('management', 'length', 'max'=>500),
			array('images', 'length', 'max'=>21),
			array('coordinator, adviser, date', 'safe'),
			array('idDebtorDebt, idDebtor, idTasksAction, idUserAsigned, idCoordinator, coordinator, adviser, date, legalManagement, management, idDebtorState', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idDebtorDebt, idDebtor, idTasksAction, state, idUserAsigned, idCoordinator, coordinator, adviser, date, legalManagement, management, comments, idDebtorState, is_contact, debtorState, images', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idDebtorDebt' => Yii::t('app', 'Id Debtor Debt'),
			'idDebtor' => Yii::t('app', 'Id Debtor'),
			'idTasksAction' => Yii::t('app', 'Id Tasks Action'),
			'state' => Yii::t('app', 'State'),
			'idUserAsigned' => Yii::t('app', 'Id User Asigned'),
			'idCoordinator' => Yii::t('app', 'Id Coordinator'),
			'coordinator' => Yii::t('app', 'Coordinator'),
			'adviser' => Yii::t('app', 'Adviser'),
			'date' => Yii::t('app', 'Date'),
			'legalManagement' => Yii::t('app', 'Legal Management'),
			'management' => Yii::t('app', 'Management'),
			'comments' => Yii::t('app', 'Comments'),
			'idDebtorState' => Yii::t('app', 'Id Debtor State'),
			'is_contact' => Yii::t('app', 'Is Contact'),
			'debtorState' => Yii::t('app', 'Debtor State'),
			'images' => Yii::t('app', 'Images'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idDebtorDebt', $this->idDebtorDebt);
		$criteria->compare('idDebtor', $this->idDebtor);
		$criteria->compare('idTasksAction', $this->idTasksAction);
		$criteria->compare('state', $this->state);
		$criteria->compare('idUserAsigned', $this->idUserAsigned);
		$criteria->compare('idCoordinator', $this->idCoordinator);
		$criteria->compare('coordinator', $this->coordinator, true);
		$criteria->compare('adviser', $this->adviser, true);
		$criteria->compare('date', $this->date, true);
		$criteria->compare('legalManagement', $this->legalManagement);
		$criteria->compare('management', $this->management, true);
		$criteria->compare('comments', $this->comments, true);
		$criteria->compare('idDebtorState', $this->idDebtorState);
		$criteria->compare('is_contact', $this->is_contact);
		$criteria->compare('debtorState', $this->debtorState, true);
		$criteria->compare('images', $this->images, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}