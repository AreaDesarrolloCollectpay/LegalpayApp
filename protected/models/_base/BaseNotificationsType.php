<?php

/**
 * This is the model base class for the table "tbl_notifications_type".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "NotificationsType".
 *
 * Columns in table "tbl_notifications_type" available as properties of the model,
 * followed by relations of table "tbl_notifications_type" available as properties of the model.
 *
 * @property integer $id
 * @property string $name
 * @property string $single_url
 * @property string $general_url
 * @property string $dateCreated
 *
 * @property TblNotificationsMessages[] $tblNotificationsMessages
 */
abstract class BaseNotificationsType extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_notifications_type';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'NotificationsType|NotificationsTypes', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name', 'required'),
			array('name, single_url, general_url', 'length', 'max'=>255),
			array('dateCreated', 'safe'),
			array('single_url, general_url, dateCreated', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, name, single_url, general_url, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'messages' => array(self::HAS_MANY, 'NotificationsMessages', 'idTypeNotification'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'single_url' => Yii::t('app', 'Single Url'),
			'general_url' => Yii::t('app', 'General Url'),
			'dateCreated' => Yii::t('app', 'Date Created'),
			'tblNotificationsMessages' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('single_url', $this->single_url, true);
		$criteria->compare('general_url', $this->general_url, true);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}