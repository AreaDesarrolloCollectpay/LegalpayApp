<?php

/**
 * This is the model base class for the table "tbl_tempo_debtors".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "TempoDebtors".
 *
 * Columns in table "tbl_tempo_debtors" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $lot
 * @property integer $idCustomer
 * @property integer $idUserImport
 * @property string $type_document
 * @property string $number
 * @property string $name
 * @property integer $internal_code
 * @property string $country
 * @property string $department
 * @property string $city
 * @property string $address
 * @property string $phone
 * @property string $mobile
 * @property string $email
 * @property string $support_type
 * @property string $expiration_date
 * @property double $capital
 * @property string $comments
 * @property string $idCreditModality
 * @property string $idTypeProduct
 * @property string $origin_credit
 * @property string $legal
 * @property string $idTypeProcess
 * @property string $office_legal
 * @property string $office_legal_location
 * @property string $settled_number
 * @property string $promissory_note_o_p
 * @property string $promissory_note_d
 * @property string $au_central_risk_o_p
 * @property string $disbursement_date
 * @property double $approved_value
 * @property string $punishment_date
 * @property string $last_pay_date
 * @property double $capital_subscription
 * @property double $interest_subscription
 * @property double $secure_subscription
 * @property double $total_subscription
 * @property double $total_pay_from_expiration
 * @property string $last_pay_capital_date
 * @property string $last_pay_interest_date
 * @property string $presentation_demand_date
 * @property string $linking_format
 * @property string $conditions
 * @property integer $migrate
 * @property string $dateCreated
 *
 */
abstract class BaseTempoDebtors extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_tempo_debtors';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'TempoDebtors|TempoDebtors', $n);
	}

	public static function representingColumn() {
		return 'lot';
	}

	public function rules() {
		return array(
			array('legal, dateCreated', 'required'),
			array('idCustomer, idUserImport, internal_code, migrate', 'numerical', 'integerOnly'=>true),
			array('capital, approved_value, capital_subscription, interest_subscription, secure_subscription, total_subscription, total_pay_from_expiration', 'numerical'),
			array('lot', 'length', 'max'=>500),
			array('type_document', 'length', 'max'=>3),
			array('number, idCreditModality, idTypeProduct, legal, promissory_note_o_p, promissory_note_d, au_central_risk_o_p, linking_format', 'length', 'max'=>50),
			array('name, country, department, city, address, phone, mobile, email, support_type, origin_credit', 'length', 'max'=>200),
			array('idTypeProcess', 'length', 'max'=>255),
			array('office_legal, office_legal_location, settled_number', 'length', 'max'=>250),
			array('expiration_date, comments, disbursement_date, punishment_date, last_pay_date, last_pay_capital_date, last_pay_interest_date, presentation_demand_date, conditions', 'safe'),
			array('lot, idCustomer, idUserImport, type_document, number, name, internal_code, country, department, city, address, phone, mobile, email, support_type, expiration_date, capital, comments, idCreditModality, idTypeProduct, origin_credit, idTypeProcess, office_legal, office_legal_location, settled_number, promissory_note_o_p, promissory_note_d, au_central_risk_o_p, disbursement_date, approved_value, punishment_date, last_pay_date, capital_subscription, interest_subscription, secure_subscription, total_subscription, total_pay_from_expiration, last_pay_capital_date, last_pay_interest_date, presentation_demand_date, linking_format, conditions, migrate', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, lot, idCustomer, idUserImport, type_document, number, name, internal_code, country, department, city, address, phone, mobile, email, support_type, expiration_date, capital, comments, idCreditModality, idTypeProduct, origin_credit, legal, idTypeProcess, office_legal, office_legal_location, settled_number, promissory_note_o_p, promissory_note_d, au_central_risk_o_p, disbursement_date, approved_value, punishment_date, last_pay_date, capital_subscription, interest_subscription, secure_subscription, total_subscription, total_pay_from_expiration, last_pay_capital_date, last_pay_interest_date, presentation_demand_date, linking_format, conditions, migrate, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'lot' => Yii::t('app', 'Lot'),
			'idCustomer' => Yii::t('app', 'Id Customer'),
			'idUserImport' => Yii::t('app', 'Id User Import'),
			'type_document' => Yii::t('app', 'Type Document'),
			'number' => Yii::t('app', 'Number'),
			'name' => Yii::t('app', 'Name'),
			'internal_code' => Yii::t('app', 'Internal Code'),
			'country' => Yii::t('app', 'Country'),
			'department' => Yii::t('app', 'Department'),
			'city' => Yii::t('app', 'City'),
			'address' => Yii::t('app', 'Address'),
			'phone' => Yii::t('app', 'Phone'),
			'mobile' => Yii::t('app', 'Mobile'),
			'email' => Yii::t('app', 'Email'),
			'support_type' => Yii::t('app', 'Support Type'),
			'expiration_date' => Yii::t('app', 'Expiration Date'),
			'capital' => Yii::t('app', 'Capital'),
			'comments' => Yii::t('app', 'Comments'),
			'idCreditModality' => Yii::t('app', 'Id Credit Modality'),
			'idTypeProduct' => Yii::t('app', 'Id Type Product'),
			'origin_credit' => Yii::t('app', 'Origin Credit'),
			'legal' => Yii::t('app', 'Legal'),
			'idTypeProcess' => Yii::t('app', 'Id Type Process'),
			'office_legal' => Yii::t('app', 'Office Legal'),
			'office_legal_location' => Yii::t('app', 'Office Legal Location'),
			'settled_number' => Yii::t('app', 'Settled Number'),
			'promissory_note_o_p' => Yii::t('app', 'Promissory Note O P'),
			'promissory_note_d' => Yii::t('app', 'Promissory Note D'),
			'au_central_risk_o_p' => Yii::t('app', 'Au Central Risk O P'),
			'disbursement_date' => Yii::t('app', 'Disbursement Date'),
			'approved_value' => Yii::t('app', 'Approved Value'),
			'punishment_date' => Yii::t('app', 'Punishment Date'),
			'last_pay_date' => Yii::t('app', 'Last Pay Date'),
			'capital_subscription' => Yii::t('app', 'Capital Subscription'),
			'interest_subscription' => Yii::t('app', 'Interest Subscription'),
			'secure_subscription' => Yii::t('app', 'Secure Subscription'),
			'total_subscription' => Yii::t('app', 'Total Subscription'),
			'total_pay_from_expiration' => Yii::t('app', 'Total Pay From Expiration'),
			'last_pay_capital_date' => Yii::t('app', 'Last Pay Capital Date'),
			'last_pay_interest_date' => Yii::t('app', 'Last Pay Interest Date'),
			'presentation_demand_date' => Yii::t('app', 'Presentation Demand Date'),
			'linking_format' => Yii::t('app', 'Linking Format'),
			'conditions' => Yii::t('app', 'Conditions'),
			'migrate' => Yii::t('app', 'Migrate'),
			'dateCreated' => Yii::t('app', 'Date Created'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('lot', $this->lot, true);
		$criteria->compare('idCustomer', $this->idCustomer);
		$criteria->compare('idUserImport', $this->idUserImport);
		$criteria->compare('type_document', $this->type_document, true);
		$criteria->compare('number', $this->number, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('internal_code', $this->internal_code);
		$criteria->compare('country', $this->country, true);
		$criteria->compare('department', $this->department, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('mobile', $this->mobile, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('support_type', $this->support_type, true);
		$criteria->compare('expiration_date', $this->expiration_date, true);
		$criteria->compare('capital', $this->capital);
		$criteria->compare('comments', $this->comments, true);
		$criteria->compare('idCreditModality', $this->idCreditModality, true);
		$criteria->compare('idTypeProduct', $this->idTypeProduct, true);
		$criteria->compare('origin_credit', $this->origin_credit, true);
		$criteria->compare('legal', $this->legal, true);
		$criteria->compare('idTypeProcess', $this->idTypeProcess, true);
		$criteria->compare('office_legal', $this->office_legal, true);
		$criteria->compare('office_legal_location', $this->office_legal_location, true);
		$criteria->compare('settled_number', $this->settled_number, true);
		$criteria->compare('promissory_note_o_p', $this->promissory_note_o_p, true);
		$criteria->compare('promissory_note_d', $this->promissory_note_d, true);
		$criteria->compare('au_central_risk_o_p', $this->au_central_risk_o_p, true);
		$criteria->compare('disbursement_date', $this->disbursement_date, true);
		$criteria->compare('approved_value', $this->approved_value);
		$criteria->compare('punishment_date', $this->punishment_date, true);
		$criteria->compare('last_pay_date', $this->last_pay_date, true);
		$criteria->compare('capital_subscription', $this->capital_subscription);
		$criteria->compare('interest_subscription', $this->interest_subscription);
		$criteria->compare('secure_subscription', $this->secure_subscription);
		$criteria->compare('total_subscription', $this->total_subscription);
		$criteria->compare('total_pay_from_expiration', $this->total_pay_from_expiration);
		$criteria->compare('last_pay_capital_date', $this->last_pay_capital_date, true);
		$criteria->compare('last_pay_interest_date', $this->last_pay_interest_date, true);
		$criteria->compare('presentation_demand_date', $this->presentation_demand_date, true);
		$criteria->compare('linking_format', $this->linking_format, true);
		$criteria->compare('conditions', $this->conditions, true);
		$criteria->compare('migrate', $this->migrate);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}