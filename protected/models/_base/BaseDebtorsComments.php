<?php

/**
 * This is the model base class for the table "tbl_debtors_comments".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "DebtorsComments".
 *
 * Columns in table "tbl_debtors_comments" available as properties of the model,
 * followed by relations of table "tbl_debtors_comments" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idComment
 * @property integer $idUserComment
 * @property integer $idDebtor
 * @property string $comment
 * @property integer $active
 * @property string $dateCreated
 *
 * @property DebtorsObligations $idDebtor0
 * @property Users $idUserComment0
 */
abstract class BaseDebtorsComments extends GxActiveRecord {
    
        public $minutes;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_debtors_comments';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'DebtorsComments|DebtorsComments', $n);
	}

	public static function representingColumn() {
		return 'comment';
	}
        
        public function afterFind(){            
            $this->minutes = Yii::app()->db->createCommand("SELECT TIMESTAMPDIFF(MINUTE,'".$this->dateCreated."', NOW()) as minutes")->setFetchMode(PDO::FETCH_OBJ)->queryRow(true);
            parent::afterFind();
        }
        
        public function afterSave(){            
            $this->minutes = Yii::app()->db->createCommand("SELECT TIMESTAMPDIFF(MINUTE,'".$this->dateCreated."', NOW()) as minutes")->setFetchMode(PDO::FETCH_OBJ)->queryRow(true);
            parent::afterSave();
        }
        

	public function rules() {
		return array(
			array('idUserComment, idDebtor, comment', 'required'),
			array('idComment, idUserComment, idDebtor, active', 'numerical', 'integerOnly'=>true),
			array('idComment, idUserComment, idDebtor, active', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idComment, idUserComment, idDebtor, comment, active, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'idDebtor0' => array(self::BELONGS_TO, 'DebtorsObligations', 'idDebtor'),
			'idUserComment0' => array(self::BELONGS_TO, 'Users', 'idUserComment'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idComment' => Yii::t('app', 'Id Comment'),
			'idUserComment' => Yii::t('app', 'Id Comment'),
			'idDebtor' => Yii::t('front', 'Deudor'),
			'comment' => Yii::t('app', 'Comentario'),
			'active' => Yii::t('app', 'Activo'),
			'dateCreated' => Yii::t('app', 'Fecha de CreaciÃ³n'),
			'idDebtor0' => null,
			'idUserComment0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idComment', $this->idComment);
		$criteria->compare('idUserComment', $this->idUserComment);
		$criteria->compare('idDebtor', $this->idDebtor);
		$criteria->compare('comment', $this->comment, true);
		$criteria->compare('active', $this->active);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}