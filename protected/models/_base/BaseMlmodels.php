<?php

/**
 * This is the model base class for the table "tbl_mlmodels".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Mlmodels".
 *
 * Columns in table "tbl_mlmodels" available as properties of the model,
 * followed by relations of table "tbl_mlmodels" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idCompany
 * @property integer $idCreator
 * @property string $type
 * @property string $name
 * @property string $description
 * @property string $file
 * @property string $source
 * @property string $dataset
 * @property string $cluster
 * @property string $anomaly
 * @property string $fusion
 * @property string $prediction
 * @property string $fields
 * @property string $fieldsBigML
 * @property string $urlBigML
 * @property string $urlEmbedded
 * @property string $batchCentroide
 * @property integer $columns
 * @property integer $instances
 * @property integer $size
 * @property string $dateSource
 * @property string $dateUpdate
 * @property string $dateCreated
 *
 * @property Centroids[] $centroids
 * @property Clusters[] $clusters
 * @property DebtorsObligationsPredictionsAgreement[] $debtorsObligationsPredictionsAgreements
 * @property Users $idCompany0
 * @property Users $idCreator0
 */
abstract class BaseMlmodels extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_mlmodels';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Mlmodels|Mlmodels', $n);
	}

	public static function representingColumn() {
		return 'type';
	}

	public function rules() {
		return array(
			array('idCreator, type, name, description, fields', 'required'),
			array('idCompany, idCreator, columns, instances, size', 'numerical', 'integerOnly'=>true),
			array('type', 'length', 'max'=>1),
			array('name, description, urlBigML', 'length', 'max'=>500),
			array('file, source, dataset, cluster, anomaly, fusion, prediction, fields, fieldsBigML, urlEmbedded, batchCentroide, columns, instances, size, dateSource, dateUpdate', 'safe'),
			array('idCompany, idCreator, type, name, description, file, source, dataset, cluster, anomaly, fusion, prediction, fields, fieldsBigML, urlBigML, urlEmbedded,  batchCentroide, columns, instances, size, dateSource, dateUpdate', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idCompany, idCreator, type, name, description, file, source, dataset, cluster, anomaly, fusion, prediction, fields, fieldsBigML, urlBigML, urlEmbedded,  batchCentroide, columns, instances, size, dateSource, dateUpdate, dateCreated', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
                        'centroids' => array(self::HAS_MANY, 'Centroids', 'idMLModel'),
			'clusters' => array(self::HAS_MANY, 'Clusters', 'idMLModel'),
			'debtorsObligationsPredictionsAgreements' => array(self::HAS_MANY, 'DebtorsObligationsPredictionsAgreement', 'idMLModel'),
			'idCompany0' => array(self::BELONGS_TO, 'Users', 'idCompany'),
			'idCreator0' => array(self::BELONGS_TO, 'Users', 'idCreator'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idCompany' => null,
			'idCreator' => Yii::t('app', 'Creador'),
			'type' => Yii::t('app', 'Tipo'),
			'name' => Yii::t('app', 'Nombre'),
			'description' => Yii::t('app', 'Descripción'),
                        'file' => Yii::t('app', 'File'),
			'source' => Yii::t('app', 'source'),
			'dataset' => Yii::t('app', 'Dataset'),
			'cluster' => Yii::t('app', 'Cluster'),
			'anomaly' => Yii::t('app', 'Anomaly'),
			'fusion' => Yii::t('app', 'Fusion'),
			'prediction' => Yii::t('app', 'Prediction'),
			'fields' => Yii::t('app', 'Variables'),
			'fieldsBigML' => Yii::t('app', 'Variables BigMl'),
			'urlBigML' => Yii::t('app', 'Url Big Ml'),
			'urlEmbedded' => Yii::t('app', 'Url Embedded'),
                        'batchCentroide' => Yii::t('app', 'Batch Centroide'),
                        'columns' => Yii::t('app', 'Columns'),
			'instances' => Yii::t('app', 'Instances'),
			'size' => Yii::t('app', 'Size'),
			'dateSource' => Yii::t('app', 'Fecha Source'),
			'dateUpdate' => Yii::t('app', 'Fecha Edición'),
			'dateCreated' => Yii::t('app', 'Fecha Creación'),
                        'centroids' => null,
			'clusters' => null,
			'debtorsObligationsPredictionsAgreements' => null,
			'idCompany0' => null,
			'idCreator0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idCompany', $this->idCompany);
		$criteria->compare('idCreator', $this->idCreator);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('description', $this->description, true);
                $criteria->compare('file', $this->file, true);
		$criteria->compare('source', $this->source, true);
		$criteria->compare('dataset', $this->dataset, true);
		$criteria->compare('cluster', $this->cluster, true);
		$criteria->compare('anomaly', $this->anomaly, true);
		$criteria->compare('fusion', $this->fusion, true);
		$criteria->compare('prediction', $this->prediction, true);
		$criteria->compare('fields', $this->fields, true);
		$criteria->compare('fieldsBigML', $this->fieldsBigML, true);
		$criteria->compare('urlBigML', $this->urlBigML, true);
		$criteria->compare('urlEmbedded', $this->urlEmbedded, true);
                $criteria->compare('batchCentroide', $this->batchCentroide, true);
                $criteria->compare('columns', $this->columns);
		$criteria->compare('instances', $this->instances);
		$criteria->compare('size', $this->size);
		$criteria->compare('dateSource', $this->dateSource, true);
		$criteria->compare('dateUpdate', $this->dateUpdate, true);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}