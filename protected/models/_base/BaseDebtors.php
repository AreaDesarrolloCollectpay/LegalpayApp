<?php

/**
 * This is the model base class for the table "tbl_debtors".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Debtors".
 *
 * Columns in table "tbl_debtors" available as properties of the model,
 * followed by relations of table "tbl_debtors" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idCustomers
 * @property integer $idDebtorsState
 * @property integer $idDebtorSubstate
 * @property integer $idCity
 * @property integer $idTypeDocument
 * @property integer $is_legal
 * @property string $code
 * @property string $accountNumber
 * @property string $name
 * @property string $address
 * @property string $address_lat
 * @property string $address_lng
 * @property string $neighborhood
 * @property string $phone
 * @property string $mobile
 * @property string $email
 * @property string $comments
 * @property integer $active
 * @property string $dateCreated
 *
 * @property AssignmentsDebtorsAdvisers[] $assignmentsDebtorsAdvisers
 * @property DebtorsState $idDebtorsState0
 * @property Cities $idCity0
 * @property Users $idCustomers0
 * @property DebtorsAddresses[] $debtorsAddresses
 * @property DebtorsDebts[] $debtorsDebts
 * @property DebtorsEmails[] $debtorsEmails
 * @property DebtorsObligations[] $debtorsObligations
 * @property DebtorsPhones[] $debtorsPhones
 * @property DebtorsProperty[] $debtorsProperties
 * @property DebtorsReference[] $debtorsReferences
 */
abstract class BaseDebtors extends GxActiveRecord {
    
    public $capital;
    public $cant;
    public $indicativePhone;

    public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_debtors';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Debtors|Debtors', $n);
	}

	public static function representingColumn() {
		return 'accountNumber';
	}

	public function rules() {
		return array(
			array('idCustomers', 'required'),
			array('accountNumber', 'required','on' => 'updateD'),
			array('idCustomers, idDebtorsState, idDebtorSubstate, idCity, idTypeDocument, is_legal, active', 'numerical', 'integerOnly'=>true),
                        array('email','email'),
			array('code, accountNumber, name, address, address_lat, address_lng, neighborhood, phone, mobile, email, comments', 'safe'),
                        array('phone','match', 'pattern' => '/^[1-9]\d{6}$/','message' => '{attribute} inválido','on' => 'updateD'),  
                        array('mobile','match', 'pattern' => '/^3[\d]{9}$/','message' => '{attribute} inválido' ,'on' => 'updateD'),
			array('idCustomers, idDebtorsState, idDebtorSubstate, idCity, idTypeDocument, is_legal, code, name, address, address_lat, address_lng, neighborhood, phone, mobile, email, comments, active', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idCustomers, idDebtorsState, idDebtorSubstate, idCity, idTypeDocument, is_legal, code, accountNumber, name, address, address_lat, address_lng, neighborhood, phone, mobile, email, comments, active, dateCreated', 'safe', 'on'=>'search'),
		);
	}
        
        public function getIndicativePhone(){
            $this->indicativePhone = '';
            if($this->idCity != NULL){                
                $city = Cities::model()->findByPk($this->idCity);
                if($city != null){                    
                    $this->indicativePhone = $city->idDepartment0->indicative;
                }
            }
            return $this->indicativePhone;
        }

	public function relations() {
		return array(
                        'assignmentsDebtorsAdvisers' => array(self::HAS_MANY, 'AssignmentsDebtorsAdvisers', 'idDebtor'),
			'idDebtorsState0' => array(self::BELONGS_TO, 'DebtorsState', 'idDebtorsState'),
                        'idCity0' => array(self::BELONGS_TO, 'Cities', 'idCity'),
                        'idCustomers0' => array(self::BELONGS_TO, 'Users', 'idCustomers'),
                        'debtorsAddresses' => array(self::HAS_MANY, 'DebtorsAddresses', 'idDebtor'),
                        'debtorsDebts' => array(self::HAS_MANY, 'DebtorsDebts', 'idDebtor'),
                        'debtorsEmails' => array(self::HAS_MANY, 'DebtorsEmails', 'idDebtor'),
			'debtorsObligations' => array(self::HAS_MANY, 'DebtorsObligations', 'idDebtor'),
                        'debtorsPhones' => array(self::HAS_MANY, 'DebtorsPhones', 'idDebtor'),
                        'debtorsProperties' => array(self::HAS_MANY, 'DebtorsProperty', 'idDebtor'),
                        'debtorsReferences' => array(self::HAS_MANY, 'DebtorsReference', 'idDebtor'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idCustomers' => Yii::t('front', 'Cliente'),
			'idDebtorsState' => Yii::t('front', 'Estado'),
                        'idDebtorSubstate' => Yii::t('front', 'Sub-estado'),
                        'idCity' => Yii::t('front', 'Ciudad'),
			'idTypeDocument' => Yii::t('front', 'Tipo Documento'),
			'is_legal' => Yii::t('app', 'Es Legal'),
			'code' => Yii::t('front', 'CC / NIT'),
                        'accountNumber' => Yii::t('front', 'Número Interno'),
			'name' => Yii::t('front', 'Nombre'),
			'address' => Yii::t('front', 'Dirección'),
                        'address_lat' => Yii::t('front', 'Latitud Dirección'),
			'address_lng' => Yii::t('front', 'Longitud Dirección'),
                        'neighborhood' => Yii::t('front', 'Barrio / Zona'),
			'phone' => Yii::t('front', 'Teléfono'),
                        'mobile' => Yii::t('app', 'Celular'),
			'email' => Yii::t('front', 'Email'),
			'comments' => Yii::t('front', 'Comentarios'),
			'active' => Yii::t('front', 'Activo'),
			'dateCreated' => Yii::t('front', 'Fecha Creación'),
                        'assignmentsDebtorsAdvisers' => null,
			'idDebtorsState0' => null,
                        'idCity0' => null,
                        'idCustomers0' => null,
                        'debtorsAddresses' => null,
                        'debtorsDebts' => null,
                        'debtorsEmails' => null,
			'debtorsObligations' => null,
                        'debtorsPhones' => null,
                        'debtorsProperties' => null,
                        'debtorsReferences' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idCustomers', $this->idCustomers);
		$criteria->compare('idDebtorsState', $this->idDebtorsState);
                $criteria->compare('idDebtorSubstate', $this->idDebtorSubstate);
		$criteria->compare('idCity', $this->idCity);
                $criteria->compare('idTypeDocument', $this->idTypeDocument);
		$criteria->compare('is_legal', $this->is_legal);
		$criteria->compare('code', $this->code, true);
                $criteria->compare('accountNumber', $this->accountNumber, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('address', $this->address, true);
                $criteria->compare('address_lat', $this->address_lat, true);
		$criteria->compare('address_lng', $this->address_lng, true);
                $criteria->compare('neighborhood', $this->neighborhood, true);
		$criteria->compare('phone', $this->phone, true);
                $criteria->compare('mobile', $this->mobile, true);
		$criteria->compare('email', $this->email, true);                
		$criteria->compare('comments', $this->comments, true);
		$criteria->compare('active', $this->active);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}