<?php

/**
 * This is the model base class for the table "view_coordinators".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ViewCoordinators".
 *
 * Columns in table "view_coordinators" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $idProfile
 * @property integer $idCompany
 * @property string $company
 * @property string $profile
 * @property string $name
 * @property string $numberDocument
 * @property string $userName
 * @property string $email
 * @property string $phone
 * @property string $address
 * @property integer $active
 * @property integer $is_internal
 *
 */
abstract class BaseViewCoordinators extends GxActiveRecord {
    
    public $capital;
    public $interest;
    public $payments;
    public $estimated;
    public $pending;
     

    public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'view_coordinators';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'ViewCoordinators|ViewCoordinators', $n);
	}

	public static function representingColumn() {
		return 'company';
	}

	public function rules() {
		return array(
			array('id, idProfile, idCompany, active, is_internal', 'numerical', 'integerOnly'=>true),
			array('company, profile, name, numberDocument, userName, email, phone, address', 'safe'),
			array('id, idProfile, idCompany, company, profile, name, numberDocument, userName, email, phone, address, active, is_internal', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idProfile, idCompany, company, profile, name, numberDocument, userName, email, phone, address, active, is_internal', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idProfile' => Yii::t('app', 'Id Profile'),
                        'idCompany' => Yii::t('app', 'Id Company'),
			'company' => Yii::t('app', 'Company'),
			'profile' => Yii::t('app', 'Profile'),
			'name' => Yii::t('app', 'Name'),
                        'numberDocument' => Yii::t('app', 'Number Document'),
			'userName' => Yii::t('app', 'User Name'),
			'email' => Yii::t('app', 'Email'),
			'phone' => Yii::t('app', 'Phone'),
			'address' => Yii::t('app', 'Address'),
			'active' => Yii::t('app', 'Active'),
                        'is_internal' => Yii::t('app', 'Is Internal'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idProfile', $this->idProfile);
                $criteria->compare('idCompany', $this->idCompany);
		$criteria->compare('company', $this->company, true);
		$criteria->compare('profile', $this->profile, true);
		$criteria->compare('name', $this->name, true);
                $criteria->compare('numberDocument', $this->numberDocument, true);
		$criteria->compare('userName', $this->userName, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('active', $this->active);
                $criteria->compare('numberDocument', $this->numberDocument, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}