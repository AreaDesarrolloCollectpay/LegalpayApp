<?php

/**
 * This is the model base class for the table "tbl_debtors_addresses".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "DebtorsAddresses".
 *
 * Columns in table "tbl_debtors_addresses" available as properties of the model,
 * followed by relations of table "tbl_debtors_addresses" available as properties of the model.
 *
 * @property integer $id
 * @property integer $idUserAddress
 * @property integer $idDebtor
 * @property integer $idTypeReference
 * @property integer $idCity
 * @property string $neighborhood
 * @property string $address
 * @property string $comment
 * @property integer $active
 * @property string $dateCreated
 *
 * @property Cities $idCity0
 * @property Debtors $idDebtor0
 * @property TypeReference $idTypeReference0
 * @property Users $idUserAddress0
 */
abstract class BaseDebtorsAddresses extends GxActiveRecord {
    
    public $idCountry;
    public $idDepartment;
    public $fullDistrict;
    public $state;

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'tbl_debtors_addresses';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'DebtorsAddresses|DebtorsAddresses', $n);
	}

	public static function representingColumn() {
		return 'neighborhood';
	}

	public function rules() {
		return array(
			array('idUserAddress, idDebtor, idTypeReference, idCountry, idDepartment, idCity, neighborhood, address, active', 'required'),
			array('idUserAddress, idDebtor, idTypeReference, idCountry, idDepartment, idCity, active', 'numerical', 'integerOnly'=>true),
			array('neighborhood', 'length', 'max'=>500),
                        array('comment', 'safe'),
			array('idUserAddress, idDebtor, idTypeReference, idCity, active', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, idUserAddress, idDebtor, idTypeReference, idCountry, idDepartment, idCity, neighborhood, address, comment, active, dateCreated', 'safe', 'on'=>'search'),
		);
	}
        
        public function afterFind(){
            parent::afterFind();                        
            
            if($this->idCity!= NULL){
                $treeDistrict = ViewLocation::model()->find(array('condition' =>'idCity ='.$this->idCity));
                if($treeDistrict != NULL){
                    $this->idCountry = $treeDistrict->idCountry;
                    $this->idDepartment = $treeDistrict->idDepartment;
                    $this->fullDistrict = $treeDistrict->location;                    
                }                
            }
            
            $this->state = Yii::t('front', 'Por validar');
            if($this->active == 1){
                $this->state = Yii::t('front', 'Localizado');                
            }elseif($this->active == 2){
                $this->state = Yii::t('front', 'Ilocalizado');
            }
        }
        
        public function afterSave() {
            parent::afterSave();
            
            if($this->idCity!= NULL){
                $treeDistrict = ViewLocation::model()->find(array('condition' =>'idCity ='.$this->idCity));
                if($treeDistrict != NULL){
                    $this->idCountry = $treeDistrict->idCountry;
                    $this->idDepartment = $treeDistrict->idDepartment;
                    $this->fullDistrict = $treeDistrict->location;                    
                }                
            }
            
            $this->state = Yii::t('front', 'Por validar');
            if($this->active == 1){
                $this->state = Yii::t('front', 'Localizado');                
            }elseif($this->active == 2){
                $this->state = Yii::t('front', 'Ilocalizado');
            }
        }

	public function relations() {
		return array(
			'idCity0' => array(self::BELONGS_TO, 'Cities', 'idCity'),
			'idDebtor0' => array(self::BELONGS_TO, 'Debtors', 'idDebtor'),
			'idTypeReference0' => array(self::BELONGS_TO, 'TypeReference', 'idTypeReference'),
			'idUserAddress0' => array(self::BELONGS_TO, 'Users', 'idUserAddress'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'idUserAddress' => Yii::t('front', 'Usuario'),
			'idDebtor' => Yii::t('front', 'Deudor'),
			'idTypeReference' => Yii::t('front', 'Tipo'),
			'idCountry' => Yii::t('front', 'País'),
			'idDepartment' => Yii::t('front', 'Departamento'),
			'idCity' => Yii::t('front', 'Ciudad'),
			'neighborhood' => Yii::t('front', 'Barrio'),
			'address' => Yii::t('front', 'Dirección'),
			'comment' => Yii::t('front', 'Comentario'),
			'active' => Yii::t('front', 'Estado'),
			'dateCreated' => Yii::t('front', 'Fecha de Creación'),
			'idCity0' => null,
			'idDebtor0' => null,
			'idTypeReference0' => null,
			'idUserAddress0' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('idUserAddress', $this->idUserAddress);
		$criteria->compare('idDebtor', $this->idDebtor);
		$criteria->compare('idTypeReference', $this->idTypeReference);
		$criteria->compare('idCity', $this->idCity);
		$criteria->compare('neighborhood', $this->neighborhood, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('comment', $this->comment, true);
		$criteria->compare('active', $this->active);
		$criteria->compare('dateCreated', $this->dateCreated, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
                        //'sort' => array('defaultOrder'=>'orden')
		));
	}
}